<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用最大期望(EM)算法与贝叶斯定理解决GMM问题</title>
      <link href="/2023/08/26/EM%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/08/26/EM%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Expectation-Maximization-Algorithm-EM-算法与贝叶斯定理"><a href="#Expectation-Maximization-Algorithm-EM-算法与贝叶斯定理" class="headerlink" title="Expectation-Maximization Algorithm (EM) 算法与贝叶斯定理"></a>Expectation-Maximization Algorithm (EM) 算法与贝叶斯定理</h1><ul><li><p>注1: 本文仅基于GMM高斯混合模型的EM算法解法来讨论</p></li><li><p>注2: 本文不会涉及证明EM算法对于期望似然函数 (ELF) 的 weak monotonic increase 性质，<strong>但这个证明是这个算法可行的基础</strong>，请自行证明</p></li></ul><p><br></p><hr><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入:"></a>问题引入:</h2><blockquote><ul><li><b>我们现在有两个已知服从正态分布的数据集混在一起了（比如最经典的，两个班级的成绩数据混在一起了），我们要给出一个合理的预测每个成绩更可能是那个班的</b></li><li>我们首先创建两个基于正太分布的数据集，我们现在假设班级1有60个人，班级2有40个人（这个数据后面有用）。</li><li>接下来我会生成一组数据，并在数轴上展示:<ul><li><strong>班级 1 的真实参数：</strong> $num_1, \mu_1, \sigma_1 = 50, 80, 5$  </li><li><strong>班级 2 的真实参数：</strong> $num_2, \mu_2, \sigma_2 = 40, 50, 10$</li></ul></li></ul><p><br></p><p><img src = "https://cdn-us.imgs.moe/2023/08/26/64e8df46c9a2b.png" width = 60%></p></blockquote><p><br></p><hr><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题:"></a>分析问题:</h2><p><br></p><h3 id="高斯混合模型GMM"><a href="#高斯混合模型GMM" class="headerlink" title="高斯混合模型GMM"></a>高斯混合模型GMM</h3><blockquote><ul><li>首先，这是一个高斯混合模型(GMM),即多个高斯分布混合在一起</li><li>我们的目的是<font color = red><b>找到最合适的两个高斯分布来分解这个分布</b></font></li><li>即: 优化两个高斯分布的 <font color = red><b>四个参数</b></font> 使得预测分布与真实分布的的期望似然函数最大（这个期望似然函数可以简单理解为<strong>loss function</strong>）</li><li><font color = red><b>注意，EM算法的根本目的是找到四个参数使得期望似然函数最大</b></font></li></ul></blockquote><p><br></p><h3 id="为什么要用EM："><a href="#为什么要用EM：" class="headerlink" title="为什么要用EM："></a>为什么要用EM：</h3><blockquote><ul><li>EM算法用于在存在<strong>隐藏或未观察到的变量</strong>的情况下，估计概率模型参数。</li><li>EM算法在存在<strong>隐变量</strong>的情况下相对于其他优化算法，比如梯度下算法，更有优势。因为我们不需要知道“<strong>隐变量</strong>”具体是什么</li></ul></blockquote><p><br></p><h3 id="在这个情景中与EM的关系"><a href="#在这个情景中与EM的关系" class="headerlink" title="在这个情景中与EM的关系:"></a>在这个情景中与EM的关系:</h3><blockquote><ul><li>依据前文， EM算法需要有两个要素：<strong>隐变量</strong> 和 <strong>参数</strong>， 而在这个模型中:<ul><li><strong>隐变量:</strong> 这个数据是一班的还是二班的？<font color = red>我们可以通过设隐变量 Z = 1 或 2 表示</font> </li><li><strong>参数:</strong> 两个正态分布，共需要<strong>四个变量</strong>来表示</li></ul></li></ul></blockquote><p><br></p><hr><h2 id="EM-算法简述"><a href="#EM-算法简述" class="headerlink" title="EM 算法简述:"></a>EM 算法简述:</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h3><blockquote><p>我们将随机或按一定规律初始化四个参数</p></blockquote><h3 id="E步骤"><a href="#E步骤" class="headerlink" title="E步骤"></a>E步骤</h3><blockquote><ul><li><ol><li>给出当前似然函数，即<font color = red><b>估计的四个参数表示的两个正态分布的pdf表达式</b></font></li></ol></li><li><ol><li>根据当前的似然函数求出 <strong>后验概率</strong></li></ol></li></ul></blockquote><p><br></p><h3 id="M步骤"><a href="#M步骤" class="headerlink" title="M步骤"></a>M步骤</h3><blockquote><ul><li>根据<strong>后验概率</strong>更新计算新的四个参数</li><li>重新进入E步骤开始下一步迭代</li></ul></blockquote><p><br></p><h3 id="正确性证明-略"><a href="#正确性证明-略" class="headerlink" title="正确性证明: 略"></a>正确性证明: 略</h3><p><br></p><hr><h2 id="从机器学习与统计而不是概率的视角看待贝叶斯定理"><a href="#从机器学习与统计而不是概率的视角看待贝叶斯定理" class="headerlink" title="从机器学习与统计而不是概率的视角看待贝叶斯定理"></a>从机器学习与统计而不是概率的视角看待贝叶斯定理</h2><p><br></p><h3 id="既然涉及到计算-“后验概率”，-那么我们就绕不开贝叶斯定律"><a href="#既然涉及到计算-“后验概率”，-那么我们就绕不开贝叶斯定律" class="headerlink" title="既然涉及到计算 “后验概率”， 那么我们就绕不开贝叶斯定律"></a>既然涉及到计算 “后验概率”， 那么我们就绕不开<strong>贝叶斯定律</strong></h3><blockquote><p>在更一般的解释框架下，<strong>后验概率（Posterior Probability）</strong> 是表示<font color = red><b>在观察到某些数据 $x$ 之后，某个假设或模型 $\theta$ 是真实的概率。</b></font>与<strong>似然函数</strong>一样，后验概率也用于<strong>量化一个假设或模型与观测数据的一致性</strong>，但它还<strong>进一步地结合了先验信息</strong>。</p><p>用数学语言表示，后验概率 $P(\theta | x)$ 通常通过贝叶斯定理计算：</p><script type="math/tex; mode=display">P(\theta | x) = \frac{P(x | \theta) \cdot P(\theta)}{P(x)}</script><p>其中：</p><ul><li>$P(\theta)$ 是<strong>先验概率</strong>，表示<font color = red><b>在观察数据之前我们对 $\theta$ 的信念或知识。</b></font></li><li><p>$P(x | \theta)$ 是<strong>似然函数</strong>， 表示<font color = red><b>在给定 $\theta$ 的条件下观测到数据 $x$ 的概率或相对可能性。</b></font> 似然函数的意义如下：</p><ul><li>在贝叶斯公式中，似然概率 $P(x | \theta)$ 量化了<font color = red><b>给定模型或假设 $\theta$ 的情况下，观察到数据 $x$ 的相对可能性或概率。</b></font>。 <strong>高似然值</strong>意味着在给定模型或假设 $\theta$ 的情况下，<strong>数据 $x$ 出现的概率更高</strong>，这通常会<strong>导致这个值在该模型或假设的后验概率中也更高</strong>。</li><li>总体而言，<strong>似然</strong>在贝叶斯分析中提供了一种<font color = red><b>量化观测数据与模型之间一致性或拟合程度的方法</b></font>。通过与先验概率 $P(\theta)$ 和边缘概率 $P(x)$ 的结合，似然帮助我们<font color = red><b>更新和修正对模型或假设 $\theta$ 的信念</b></font>，从而达到根据数据进行推理的目的。</li></ul></li><li><p>$P(x)$ 是<strong>边缘概率（也称为“证据”）</strong>，</p><ul><li>表示 <font color = red><b>在考虑所有可能的模型或假设 $\theta$ 后，观察到数据 $x$ 的总概率 $P(x)$</b></font></li><li>反映了<strong>数据 $x$</strong> 在<font color = red><b>没有任何先验信息或假设限制的情况下的“自然”出现概率。</b></font></li><li>由于evidence是所有可能的模型和假设概率和，所以也当作<font color = red><b>归一化分母</b></font>，对应的，<font color = red><b>分子是只考虑了一种模型或者假设下观察到某个数据的概率</b></font></li><li>这有助于我们理解<strong>在给定数据 $x$ 的情况下</strong>，<strong>不同的模型或假设 $\theta$</strong> 的<strong>相对可能性</strong>。</li><li>通常通过对所有可能的 $\theta$ 值进行积分或求和来计算：$P(x) = \int P(x | \theta) \cdot P(\theta) \, d\theta$（连续情况）或 $P(x) = \sum_{\theta} P(x | \theta) \cdot P(\theta)$（离散情况）。</li></ul></li><li><p><strong>后验概率 $P(\theta | x)$</strong> </p><ul><li><strong>综合了先验概率和观测数据</strong>，为我们提供了一个更新的、更全面的视图</li><li>用于<font color = red><b>评估假设或模型 $\theta$ 的可信度</b></font>。</li></ul></li></ul></blockquote><h3 id="贝叶斯在模型预估中的作用"><a href="#贝叶斯在模型预估中的作用" class="headerlink" title="贝叶斯在模型预估中的作用"></a>贝叶斯在模型预估中的作用</h3><blockquote><p>贝叶斯定理计算的后验概率提供了一种<strong>统一的方式</strong>，用于<strong>结合先验信息和新的观测数据，以更新我们对某个假设或模型的信念</strong>。</p></blockquote><p><br></p><h3 id="定义RV与事件"><a href="#定义RV与事件" class="headerlink" title="定义RV与事件:"></a>定义RV与事件:</h3><blockquote><ul><li>我们定义 Random Variable $X$ 与 Random Variable $Z$<ul><li>$X$ 表示这个样本的成绩，依此定义事件 $X = x_i \ ( x_i\isin [0, 100] )$</li><li>$Z$ 表示这个样本是哪个班级的，依此定义事件 $Z = z_i \ ( z_i \isin \set{1, 2} )$</li><li>注意， $X$, $Z$ 两个是一个样本的两个“成员变量”，关系是等价的</li></ul></li></ul></blockquote><h3 id="带入贝叶斯定理"><a href="#带入贝叶斯定理" class="headerlink" title="带入贝叶斯定理"></a>带入贝叶斯定理</h3><blockquote><ul><li>先验概率 prior: $p(Z = z_i)$ 表示如果没有任何其他条件的话一个样本属于某个班级的概率是什么</li><li>似然 likelihood: $p(X = x_i | Z = z_i)$  <ul><li>这个似然表示的是<font color = red><b> 如果这个样本属于z_i班的话，这个成绩出现的概率</b></font>， 就是<strong>z_i班的人拿这个成绩的概率</strong></li><li><strong>但是实际上这个似然有什么意义呢？</strong> 这个似然其实是表示了<font color = red><b>现在的模型对这个成绩归属的估计到底靠不靠谱？</b></font></li><li>人话：<font color = red><b>如果一班平均分非常非常高，那么对于一个具有非常低的成绩的样本，我们理应认为他不太可能是一班的，但是如果先验概率认为他是一班的，那么就是先验概率的问题</b></font></li></ul></li><li>证据（边缘概率）evidence: $p(X =x_i)$ <font color = red><b>表示在没有任何其他条件的情况下，这个样本得到这个成绩的概率</b></font><ul><li>计算方法应该是: $\sum_{i = 1}^n{p(Z = x_i | Z = z_i)p(Z = z_i)}$</li></ul></li><li>后验概率 posterior: $p(Z = z_i | X = x_i)$ 表示<font color = red><b>如果这个样本的成绩是x_i的话，这个样本是z_i班级的可能性</b></font></li><li>公式:<script type="math/tex; mode=display">p(Z = z_i | X = x_i) = \frac{p(X = x_i | Z = z_i)p(Z = z_i)}{\sum_{i = 1}^n{p(X = x_i | Z = z_i)p(Z = z_i)}}</script></li></ul><hr></blockquote><h2 id="EM-算法步骤"><a href="#EM-算法步骤" class="headerlink" title="EM 算法步骤:"></a>EM 算法步骤:</h2><blockquote><p>知道了贝叶斯定理之后就可以围绕贝叶斯定理来设计出<font color = red><b>基于贝叶斯定理的EM算法</b></font></p></blockquote><hr><h2 id="E"><a href="#E" class="headerlink" title="E:"></a>E:</h2><blockquote><ul><li>首先对于E，要求是计算出后验概率</li><li>我们就把所有上文的数据带入以下公式计算出所以p(Z = z_i | X = x_i):<script type="math/tex; mode=display">p(Z = z_i | X = x_i) = \frac{p(X = x_i | Z = z_i)p(Z = z_i)}{\sum_{i = 1}^n{p(X = x_i | Z = z_i)p(Z = z_i)}}</script></li></ul></blockquote><p><br></p><hr><h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><blockquote><ul><li>M步骤就是想办法<font color = red><b>基于E中算出的后验概率来更新似然函数的参数</b></font>来<strong>最大化期望似然函数</strong></li></ul></blockquote><p><br></p><h3 id="首先，-如何更新μ才能比原先的μ更接近真实的μ呢？（μ值的intuition对于σ值也是类似的）"><a href="#首先，-如何更新μ才能比原先的μ更接近真实的μ呢？（μ值的intuition对于σ值也是类似的）" class="headerlink" title="首先， 如何更新μ才能比原先的μ更接近真实的μ呢？（μ值的intuition对于σ值也是类似的）"></a>首先， 如何更新μ才能比原先的μ更接近真实的μ呢？（μ值的intuition对于σ值也是类似的）</h3><blockquote><ul><li>intuition():<ul><li>我们要构造一个函数，使得这个函数可以“慢慢把$\mu$值向正确的方向拖动”，实际上我们会构造以下函数（本文未给出严禁证明）:<script type="math/tex; mode=display">\mu_{new}(1) = \sum_{i = 1}^n{\frac{p(Z = 1 | X = x_i) \cdot x_i}{\sum_{i = 1}^n{p(Z = 1 | X = x_i)}}}</script>或者如果把第i个数据的后验概率定义为$\omega_i$可以简写为:<script type="math/tex; mode=display">\mu_{new}(1) = \sum_{i = 1}^n{\frac{\omega_i \cdot x_i}{\sum_{i = 1}^n{\omega_i}}}</script></li></ul></li></ul><p>理解: 这个公式每个component作用如下:<br>分子：$\sum_{i = 1}^n{\omega_i \cdot x_i}$, 含义为 <font color = red>$x_i$对于后验概率的加权和（注意不是加权平均）</font><br>分母: $\sum{i = 1}^n{\omega_i}$, 含义为归一化，<strong>让加权和变成加权平均！！</strong></p></blockquote><p><br></p><h3 id="为什么会越来越接近呢（定性分析）"><a href="#为什么会越来越接近呢（定性分析）" class="headerlink" title="为什么会越来越接近呢（定性分析）"></a>为什么会越来越接近呢（定性分析）</h3><blockquote><ul><li>首先，明确一点，如果数据量足够大，那么<strong>真实中心附近一定会有越来约密集的样本点</strong></li><li>如果$\mu$偏离了真实值，那么，<strong>原本真实中心的$\omega$后验概率权重会偏小（这是似然函数偏小导致的），然后估计的中心样本点比较稀疏，但是给了非常大的权重</strong>。</li><li>这时候算法的加权平均会<strong>慢慢把$\mu$往真实值那里拉</strong>，如以下例子:<ul><li>我给估计的样本中心的1个元素权重定为5，实际样本中心的10个元素的权重定为1，最后加权平均<strong>一定会偏向实际样本中心</strong></li><li>但是这样<strong>不可保证</strong>一定会到“最大似然函数”，但是能非常好的接近</li></ul></li></ul></blockquote><p><br></p><h3 id="不严谨证明这个方法的可行性"><a href="#不严谨证明这个方法的可行性" class="headerlink" title="不严谨证明这个方法的可行性:"></a>不严谨证明这个方法的可行性:</h3><blockquote><p>首先我们现在想要证明的命题是: <font color = red><b> $当\mu恰好等于\mu<em>{true}时，这个公式计算出来的\mu</em>{new}刚好就是\mu_{true}$ </b></font><br>证明:</p><script type="math/tex; mode=display">如果数据样本足够大，则\mu_{true} = \sum_{i = 1}^n{p(X = x_i)x_i}</script><p>-假设 $p(Z = 1 | X = x_i) = p(X = x_i)$</p><script type="math/tex; mode=display">\mu_{new}(1) = \sum_{i = 1}^n{\frac{\omega_i \cdot x_i}{\sum_{i = 1}^n{\omega_i}}}  = \sum_{i = 1}^n{\frac{p(X = x_i) \cdot x_i}{\sum_{i = 1}^n{p(X = x_i)}}} = \sum_{i = 1}^n{p(X = x_i) \cdot x_i} = \mu_{true} \ (补充：\sum_{i = 1}^n{p(X = x_i)} = 1)</script><p>所以仅需证明，在n足够大时:</p><script type="math/tex; mode=display">p(Z = 1 | X = x_i) = p(X = x_i)</script><p>证明：</p><script type="math/tex; mode=display">p(X = x_i) = p(X = x_i | Z = 1)p(Z = 1) + p(X = x_i | Z = 2)p(Z = 2)</script><p>其中由于分布就是真实分布，所以$p(Z = 1), p(z = 2)$中有一个为0一共为1，假设$Z = 1$, 有：</p><script type="math/tex; mode=display">p(X = x_i) = p(X = x_i | Z = 1)p(Z = 1)</script><ul><li>根据贝叶斯定理<script type="math/tex; mode=display">p(Z = z_i | X = x_i) = \frac{p(X = x_i | Z = z_i)p(Z = z_i)}{\sum_{i = 1}^n{p(X = x_i | Z = z_i)p(Z = z_i)}}</script></li><li>由于就是真实分布，所以Evidence和为1，故有:<script type="math/tex; mode=display">p(Z = 1 | X = x_i) = p(X = x_i | Z = 1)p(Z = 1) = p(X = x_i)</script><strong>Q.E.D</strong></li></ul></blockquote><p><br></p><h3 id="这个公式对于σ²的扩展"><a href="#这个公式对于σ²的扩展" class="headerlink" title="这个公式对于σ²的扩展:"></a>这个公式对于σ²的扩展:</h3><blockquote><p>与$\mu$类似，方差也有类似的迭代公式，只是加权平均的不再是$x<em>i$,而是 $(x_i - \mu</em>{new})^2$, 与新的中心的距离的平方差，公式如下:</p><script type="math/tex; mode=display">\sigma^2_{new}(1) = \sum_{i = 1}^n{\frac{\omega_i \cdot (x_i - \mu_{new})^2}{\sum_{i = 1}^n{\omega_i}}}</script><p>注: 这里$\omega_i$表示第i个样本的后验概率，与上文同</p></blockquote><p><br></p><h3 id="先验概率的迭代公式（已知占比）："><a href="#先验概率的迭代公式（已知占比）：" class="headerlink" title="先验概率的迭代公式（已知占比）："></a>先验概率的迭代公式（已知占比）：</h3><blockquote><p>与$\mu, \sigma^2$不同的是，先验概率prior的初始值是确定的，而不是随机的<br>prior的公式是:$p(Z = z_i)$, 表明，没有任何条件的情况下对于任意的样本应该如何估计他的归属<br><strong>根据定义可以非常容易得知，这个东西就是一个班级的人数占比啊！</strong><br>所以计算公式理所应当的为:</p><script type="math/tex; mode=display">prior_1 = \frac{num_1}{num_1 + num_2}</script><script type="math/tex; mode=display">prior_2 = \frac{num_2}{num_1 + num_2}</script><p><strong>注意，如果已知每个班的人数，</strong><font color = red><b>这个可以当作一个参数不变</b></font></p></blockquote><p><br></p><h2 id="先验概率迭代公式（未知占比）："><a href="#先验概率迭代公式（未知占比）：" class="headerlink" title="先验概率迭代公式（未知占比）："></a>先验概率迭代公式（未知占比）：</h2><blockquote><p>这样初值就只能用随机了<br>intuition: 既然不知到占比，那么就假设我们的后验概率是准确的，后验概率的意义是$p(Z = z_i | X = x_i)$，即<strong>每个点属于某个班级的概率</strong>， <font color = red><b>那么就直接去后验概率的平均，表示平均每个点分到某个班的概率是多少</b></font>就可以了，公式也会非常简单:</p><script type="math/tex; mode=display">prior_1 = \frac{1}{n}\sum_{i = 1}^n{\omega_i}</script><p>注: 这里$\omega_i$表示第i个样本的后验概率，与上文同</p></blockquote><p><br></p><hr><h2 id="实现核心代码"><a href="#实现核心代码" class="headerlink" title="实现核心代码"></a>实现核心代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化参数</span></span><br><span class="line">init_mu1, init_sigma1 = <span class="number">85</span>, <span class="number">8</span>  <span class="comment"># 班级 1</span></span><br><span class="line">init_mu2, init_sigma2 = <span class="number">55</span>, <span class="number">9</span>  <span class="comment"># 班级 2</span></span><br><span class="line">init_pi1 = num1 / (num1 + num2)  <span class="comment"># 最开始的先验概率priority，即班级 1 的学生所占比例</span></span><br><span class="line">init_pi2 = <span class="number">1</span> - init_pi1     <span class="comment"># 班级 2 的学生所占比例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数存储</span></span><br><span class="line">mu1, sigma1 = init_mu1, init_sigma1</span><br><span class="line">mu2, sigma2 = init_mu2, init_sigma2</span><br><span class="line">pi1, pi2 = init_pi1, init_pi2</span><br><span class="line">iterations = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储每次迭代的参数以便后续可视化</span></span><br><span class="line">mu1_list, sigma1_list = [mu1], [sigma1]</span><br><span class="line">mu2_list, sigma2_list = [mu2], [sigma2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    <span class="comment"># E步: 计算后验概率（贝叶斯公式）</span></span><br><span class="line">    <span class="comment"># 首先计算先验概率，即最开始设定的p(X = x_i | Z = 1)</span></span><br><span class="line">    likelihood1 = norm.pdf(data, mu1, sigma1)</span><br><span class="line">    likelihood2 = norm.pdf(data, mu2, sigma2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算每个数据点属于每个班级的未标准化概率，即p(X = xi | Z = 1)p(Z = 1)</span></span><br><span class="line">    numerator1 = pi1 * likelihood1</span><br><span class="line">    numerator2 = pi2 * likelihood2</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算归一化因子（证据）</span></span><br><span class="line">    evidence = numerator1 + numerator2</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算标准化后的后验概率</span></span><br><span class="line">    posterior1 = numerator1 / evidence</span><br><span class="line">    posterior2 = numerator2 / evidence</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># M步: 更新参数</span></span><br><span class="line">    mu1 = np.<span class="built_in">sum</span>(posterior1 * data) / np.<span class="built_in">sum</span>(posterior1)</span><br><span class="line">    sigma1 = np.sqrt(np.<span class="built_in">sum</span>(posterior1 * (data - mu1)**<span class="number">2</span>) / np.<span class="built_in">sum</span>(posterior1))</span><br><span class="line">    pi1 = np.<span class="built_in">sum</span>(posterior1) / <span class="built_in">len</span>(data)</span><br><span class="line">    </span><br><span class="line">    mu2 = np.<span class="built_in">sum</span>(posterior2 * data) / np.<span class="built_in">sum</span>(posterior2)</span><br><span class="line">    sigma2 = np.sqrt(np.<span class="built_in">sum</span>(posterior2 * (data - mu2)**<span class="number">2</span>) / np.<span class="built_in">sum</span>(posterior2))</span><br><span class="line">    pi2 = np.<span class="built_in">sum</span>(posterior2) / <span class="built_in">len</span>(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 存储参数</span></span><br><span class="line">    mu1_list.append(mu1)</span><br><span class="line">    sigma1_list.append(sigma1)</span><br><span class="line">    mu2_list.append(mu2)</span><br><span class="line">    sigma2_list.append(sigma2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="结果可视化"><a href="#结果可视化" class="headerlink" title="结果可视化:"></a>结果可视化:</h2><p><img src = "https://cdn-us.imgs.moe/2023/08/26/64e8df476ad61.png"></p>]]></content>
      
      
      <categories>
          
          <category> ML学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解信息熵的定义</title>
      <link href="/2023/08/22/%E4%BF%A1%E6%81%AF%E7%86%B5/"/>
      <url>/2023/08/22/%E4%BF%A1%E6%81%AF%E7%86%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h1><hr><p><br></p><h2 id="首先，定义：描述信息源的-“不确定性”"><a href="#首先，定义：描述信息源的-“不确定性”" class="headerlink" title="首先，定义：描述信息源的 “不确定性”"></a>首先，定义：描述信息源的 “不确定性”</h2><blockquote><p>这个 <strong>“不确定性”</strong> 是怎么用数学量化的呢？我们常常用一个叫做<b><font color = red>信息量</font></b>的量来量化。</p></blockquote><hr><h2 id="如何定义-“信息量”："><a href="#如何定义-“信息量”：" class="headerlink" title="如何定义 “信息量”："></a>如何定义 “信息量”：</h2><blockquote><p><b><font color = red>前排提醒：这个 “信息量” 和常见的 “含有信息的多少” 有所不同</font></b><br>首先看以下情景：</p><ul><li>情形：我现在有两个room，两个room之间只有一个可以传输 0, 1 电位信号（bit）的电线连接</li><li>任务：现在我在在其中一个room中执行<b>伯努利实验</b>, 现在需要把结果传输给另一个room， 现在问题是: <b>我们需要几个 bit 才能表示一个事件？</b><br>情形：<br><br><br><img src = "https://cdn-us.imgs.moe/2023/08/22/64e483bdac901.png" width = 50%><br><br><br>eg1：<b>对于抛硬币这个实验来说， 1个bit就行了</b><br><br><br><img src = "https://cdn-us.imgs.moe/2023/08/22/64e483bdd9930.png" width = 50%><br><br><br>eg2 = <b>对于一个转盘(八种可能)需要3个bit</b><br><br><br><img src = "https://cdn-us.imgs.moe/2023/08/22/64e483be28f03.png" width = 50%></li></ul><p><b>所以我们可以总结: <font color = red>我们可以用 $n$ 个比特来表示最大 $2^n$ 个元素</font></b></p><ul><li>换句话来说：<font color = red>如果我们需要表示 $m$ 个元素, 我们需要最少 $log_2m$ 个bit！！！ </font><br><br><br><img src = "https://cdn-us.imgs.moe/2023/08/22/64e483be28624.png" width = 50%></li><li><b><font size = 5>这就是 <strong>“信息量”</strong> 的定义方式</font></b></li></ul></blockquote><hr><h2 id="“信息量”-的定义"><a href="#“信息量”-的定义" class="headerlink" title="“信息量” 的定义:"></a>“信息量” 的定义:</h2><blockquote><p><b><font color = red>信息量就是为了传输所有可能的信息需要bit的数量</font></b></p></blockquote><hr><h2 id="定义扩展："><a href="#定义扩展：" class="headerlink" title="定义扩展："></a>定义扩展：</h2><h3 id="1-从伯努利实验出发"><a href="#1-从伯努利实验出发" class="headerlink" title="1. 从伯努利实验出发"></a>1. 从伯努利实验出发</h3><blockquote><p>但是我们现在还缺一些东西，我们现在都是基于假设：<b>所有的事件发生都是等可能的</b></p><ul><li>所以我们要从每个事件都是等可能的分布<b>（i.e. 均匀分布）</b>出发，扩展到<b>任意分布</b>，即<strong>所有可能发生的事件中，每个事件发生的概率可以不一样</strong></li><li>为了实现这个目的，我们要<font color = red><b>扩展对“等可能事件数”的定义</b></font></li></ul></blockquote><p><br></p><h3 id="2-等可能事件数可以由概率推得"><a href="#2-等可能事件数可以由概率推得" class="headerlink" title="2. 等可能事件数可以由概率推得:"></a>2. 等可能事件数可以由概率推得:</h3><blockquote><p><b><font color = red>核心：对于每个事件，都看做一个均匀分布的一部分，然后不同事件是不同均匀分布的一部分，i.e. 每个事件的“信息量”不同</font></b></p><ul><li><b>对于均匀分布: </b><script type="math/tex; mode=display">对于有N个事件的均匀分布，每个事件发生的概率是:\\p = \frac{1}{n}\\</script><script type="math/tex; mode=display">\mathbf{重点：反过来说, 对于事件发生概率为 p 的均匀分布，故这个均匀分布事件数n的定义为:}\\n = \frac{1}{p}\\</script></li></ul></blockquote><p><br></p><h3 id="3-等可能事件数通过概率推广"><a href="#3-等可能事件数通过概率推广" class="headerlink" title="3. 等可能事件数通过概率推广:"></a>3. 等可能事件数通过概率推广:</h3><blockquote><p><b><font color = red>核心: 我们既然可以知道任意分布中每个事件的概率大小，那么我们就可以通过这个概率大小推知这个概率对应的均匀分布中的事件数</font></b><br><br><br><b>我们可以由事件数推得每个事件的信息量！</b></p><script type="math/tex; mode=display">\mathbf{recall: 我们可以通过事件数n来推得信息量, 定义I(A)为A的信息量}\\</script><script type="math/tex; mode=display">I = log_2{n}</script></blockquote><p><br></p><h3 id="4-结合起来就可得到任意分布中事件的信息量定义"><a href="#4-结合起来就可得到任意分布中事件的信息量定义" class="headerlink" title="4. 结合起来就可得到任意分布中事件的信息量定义"></a>4. 结合起来就可得到任意分布中事件的信息量定义</h3><blockquote><p>基础定义：</p><script type="math/tex; mode=display">对于概率为p的事件A, 定义A的信息量为 I(A):\\</script><script type="math/tex; mode=display">I(A)= log_2{\frac{1}{p}}</script><script type="math/tex; mode=display">或者可以写为：I(A) = -log_2{p}\\</script></blockquote><p><br></p><blockquote><p>更泛化的表示：</p><script type="math/tex; mode=display">对于有n个可能发生事件的任意分布:\\第i个事件概率为p_i \ (i 的范围是 [1, n])\\</script><script type="math/tex; mode=display">每个事件的信息量可以表示为:\\log_2{\frac{1}{p_i}}\\</script><script type="math/tex; mode=display">或者: - log_2{p_i}</script></blockquote><hr><h2 id="信息熵的意义-概率分布中所有事件的信息量的期望（现在默认为离散概率分布）"><a href="#信息熵的意义-概率分布中所有事件的信息量的期望（现在默认为离散概率分布）" class="headerlink" title="信息熵的意义: 概率分布中所有事件的信息量的期望（现在默认为离散概率分布）"></a>信息熵的意义: 概率分布中所有事件的信息量的期望（现在默认为离散概率分布）</h2><h3 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h3><blockquote><p>回顾期望的定义:</p><script type="math/tex; mode=display">对于服从任意概率分布的随机变量X, 范围是[1, n]\\</script><script type="math/tex; mode=display">E[g(X)] = \sum_{i = 1}^{n} p_X(x_i)g(x_i)</script></blockquote><p><br></p><blockquote><p>我们定义 $g(x_i)$ 为 $X = x_i$ 这个事件的信息量, i.e.:</p><script type="math/tex; mode=display">g(x_i) = I(x_i) = - log_2{p_i}</script></blockquote><p><br></p><h3 id="信息熵-H-概率分布中所有事件的信息量的数学期望"><a href="#信息熵-H-概率分布中所有事件的信息量的数学期望" class="headerlink" title="信息熵$H$: 概率分布中所有事件的信息量的数学期望"></a><b><font color = red>信息熵$H$: 概率分布中所有事件的信息量的数学期望</font></b></h3><blockquote><script type="math/tex; mode=display">对于服从任意概率分布的随机变量X, 范围是[1, n]</script><script type="math/tex; mode=display">H(X) = \sum_{i = 1}^{n} - p_X(x_i)log_2(p_X(x_i))</script></blockquote><hr><p><br></p><h2 id="信息量与信息熵的解释"><a href="#信息量与信息熵的解释" class="headerlink" title="信息量与信息熵的解释:"></a>信息量与信息熵的解释:</h2><h3 id="1-信息量定义的理解："><a href="#1-信息量定义的理解：" class="headerlink" title="1. 信息量定义的理解："></a>1. 信息量定义的理解：</h3><blockquote><p><b><font color = red>事件A的信息量的定义是：描述事件A所需的bit数</font></b></p><ul><li>补充：所谓 “描述事件A所需的bit数” 其实是<font color = red><b>假定每个事件A都是某个均匀分布的一部分，所以A可能出现 1 / p 种情况</b></font></li></ul></blockquote><p><br></p><h3 id="2-所以根据定义，我们不难发现："><a href="#2-所以根据定义，我们不难发现：" class="headerlink" title="2. 所以根据定义，我们不难发现："></a>2. 所以根据定义，我们不难发现：</h3><blockquote><ul><li>对于概率高的事件, 由于描述事件所需的bit数少（可能的情况少），信息量少</li><li>对于概率低的事件，由于描述事件所需bit数大（可能的情况多），信息量多<br><br><br>可能许多人会理所应当的把这个 “信息量” 理解为 <b>“事件A含有的信息多少”</b>， 实际上其实是 <b>“传输这个事件结果需要的最少bit数”</b></li></ul></blockquote><p><br></p><h3 id="3-前面提到对于某个概率分布中的任意一个事件-A-i-，-我们会假定他是某个均匀分布的一部分，为什么可以这样直接把-事件A自行扩展成一个虚构的均匀分布？"><a href="#3-前面提到对于某个概率分布中的任意一个事件-A-i-，-我们会假定他是某个均匀分布的一部分，为什么可以这样直接把-事件A自行扩展成一个虚构的均匀分布？" class="headerlink" title="3. 前面提到对于某个概率分布中的任意一个事件: $A_i$， 我们会假定他是某个均匀分布的一部分，为什么可以这样直接把*事件A自行扩展成一个虚构的均匀分布？"></a>3. 前面提到对于某个概率分布中的任意一个事件: $A_i$， 我们会<strong>假定他是某个均匀分布的一部分</strong>，为什么可以这样直接把<strong>*事件A自行扩展成一个虚构的均匀分布</strong>？</h3><blockquote><p><font color = red><b>其实这是一个贪心思想，我们回顾一下我们定义信息量这个东西想要表示什么</b></font></p><ul><li>首先，我们的目的非常简单：<font color = blue><b>最小化传递服从这个分布的随机变量结果的传输用的bit数</b></font></li><li>以最简单的例子为例：抛一个 unfair four sided dice， 概率如下:<ul><li>1: 0.1</li><li>2: 0.2</li><li>3: 0.3</li><li>4: 0.4</li></ul></li><li>我们需要最小化传递这四个数的bit数应该如何做呢？</li><li>根据贪心思想，我们想知道传递这各数字<strong>在最坏情况下</strong>所需的最少bit数，反正对于每个事件，我们只知道他发生的概率是0.1，所以最坏情况就是大家都是0.1，有10个不同事件，我们取其中一个作为事件$x = 1$发生的概率，同理可得:<ul><li>$I(1) = log_2(0.1)$</li><li>$I(2) = log_2(0.2)$</li><li>$I(3) = log_2(0.3)$</li><li>$I(4) = log_2(0.4)$</li></ul></li><li>为了描述<strong>这个概率分布</strong>平均需要多少bit才能传输，就取<strong>数学期望</strong>即可，我们称这个期望叫做<strong>H 信息熵</strong></li></ul></blockquote><p><br></p><h3 id="4-信息熵为什么能描述一个分布中事件发生的不确定性呢？"><a href="#4-信息熵为什么能描述一个分布中事件发生的不确定性呢？" class="headerlink" title="4. 信息熵为什么能描述一个分布中事件发生的不确定性呢？"></a>4. 信息熵为什么能描述一个分布中事件发生的不确定性呢？</h3><blockquote><ul><li>这要从信息熵的定义式说起:<script type="math/tex; mode=display">H(X) = \sum_{i = 1}^{n} - p_X(x_i)log_2(p_X(x_i))</script></li><li>可以看出这个这个定义式是这个分布中所有事件 “信息量” 的数学期望</li><li>单个事件信息量的定义的推导又是 “这个事件需要几个bit描述”（需要bit数量越多越不确定）</li><li>所以<strong>信息熵是描述这个分布中描述每个事件需要的bit数量，需要的bit数量越多说明情况越多，越不确定</strong></li></ul></blockquote><hr><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><blockquote><ul><li>bilibli:《如何理解信息熵》up主: Ele实验室, Ele实验室 BV号 BV1oX4y1w7aG</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> ML学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学中的数学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coursera 机器学习课程2023版笔记（第一部分）</title>
      <link href="/2023/05/21/regression/"/>
      <url>/2023/05/21/regression/</url>
      
        <content type="html"><![CDATA[<h1 id="Coursera-机器学习课程2023版笔记（第一部分）"><a href="#Coursera-机器学习课程2023版笔记（第一部分）" class="headerlink" title="Coursera 机器学习课程2023版笔记（第一部分）"></a>Coursera 机器学习课程2023版笔记（第一部分）</h1><h2 id="这本笔记的主题："><a href="#这本笔记的主题：" class="headerlink" title="这本笔记的主题："></a>这本笔记的主题：</h2><p><strong>线性回归</strong><br><b></p><pre><code>本文所用的数据来源于CUHK(SZ) MAT2041 22 fall hw05 的第一题，前两个值(x_tain,y_train)是输入，最后一个值(z_train)是输出</code></pre><p>&lt;/b&gt;</p><h2 id="第一部分：初始设置"><a href="#第一部分：初始设置" class="headerlink" title="第一部分：初始设置"></a>第一部分：初始设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x_train = np.array([<span class="number">7.0</span>,<span class="number">18.0</span>,<span class="number">3.0</span>])</span><br><span class="line">y_train = np.array([<span class="number">10.0</span>,<span class="number">3.0</span>,<span class="number">10.0</span>])</span><br><span class="line">z_train = np.array([<span class="number">30.0</span>,<span class="number">40.0</span>,<span class="number">20.0</span>])</span><br></pre></td></tr></table></figure><h2 id="这几个点在图上表示为："><a href="#这几个点在图上表示为：" class="headerlink" title="这几个点在图上表示为："></a>这几个点在图上表示为：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.scatter(x_train, y_train, z_train, marker=<span class="string">&quot;x&quot;</span>, c=<span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="第二部分：线性回归模型"><a href="#第二部分：线性回归模型" class="headerlink" title="第二部分：线性回归模型"></a>第二部分：线性回归模型</h2><p><strong>这个使用的是z = w1x1+w2x2+b</strong></p><h3 id="损失函数：J-w1-w2-b-1-2m-sum-fm-b-x-y-z-z-real-2"><a href="#损失函数：J-w1-w2-b-1-2m-sum-fm-b-x-y-z-z-real-2" class="headerlink" title="损失函数：J(w1,w2,b)=(1/2m)sum(fm,b(x,y,z)-z_real)^2"></a>损失函数：J(w1,w2,b)=(1/2m)sum(fm,b(x,y,z)-z_real)^2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute_cost</span>(<span class="params">w_1, w_2, b</span>):</span><br><span class="line">    <span class="keyword">global</span> x_train, y_train, z_train, alpha</span><br><span class="line">    m = <span class="built_in">len</span>(x_train) <span class="comment">#数据量</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        summ += (w_1*x_train[i]+w_2*y_train[i]+b-z_train[i])**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/(<span class="number">2</span>*m))*summ</span><br></pre></td></tr></table></figure><h3 id="建立模型的偏导函数-dJ-dw1-1-m求和x1-w1x1-w2x2-b-y-dJ-dw2-1-m求和x2-w1x1-w2x2-b-y-dJ-db-1-m求和-w1x1-w2x2-b-y"><a href="#建立模型的偏导函数-dJ-dw1-1-m求和x1-w1x1-w2x2-b-y-dJ-dw2-1-m求和x2-w1x1-w2x2-b-y-dJ-db-1-m求和-w1x1-w2x2-b-y" class="headerlink" title="建立模型的偏导函数 dJ/dw1=1/m求和x1(w1x1+w2x2+b-y), dJ/dw2=1/m求和x2(w1x1+w2x2+b-y) ,dJ/db=1/m求和(w1x1+w2x2+b-y)"></a>建立模型的偏导函数 dJ/dw1=1/m求和x1(w1x1+w2x2+b-y), dJ/dw2=1/m求和x2(w1x1+w2x2+b-y) ,dJ/db=1/m求和(w1x1+w2x2+b-y)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partial_w_1</span>(<span class="params">w_1, w_2, b</span>):</span><br><span class="line">    <span class="keyword">global</span> x_train, y_train, z_train, alpha</span><br><span class="line">    m = <span class="built_in">len</span>(x_train) <span class="comment">#数据量</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        summ += x_train[i]*(w_1*x_train[i]+w_2*y_train[i]+b-z_train[i])</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/m)*summ</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partial_w_2</span>(<span class="params">w_1, w_2, b</span>): <span class="comment">#可以用decorator来简化，但是这里先不整活</span></span><br><span class="line">    <span class="keyword">global</span> x_train, y_train, z_train, alpha</span><br><span class="line">    m = <span class="built_in">len</span>(x_train) <span class="comment">#数据量</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        summ += y_train[i]*(w_1*x_train[i]+w_2*y_train[i]+b-z_train[i])</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/m)*summ</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partial_b</span>(<span class="params">w_1, w_2, b</span>): <span class="comment">#可以用decorator来简化，但是这里先不整活</span></span><br><span class="line">    <span class="keyword">global</span> x_train, y_train, z_train, alpha</span><br><span class="line">    m = <span class="built_in">len</span>(x_train) <span class="comment">#数据量</span></span><br><span class="line">    summ = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        summ += w_1*x_train[i]+w_2*y_train[i]+b-z_train[i]</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/m)*summ</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_gradient</span>(<span class="params">w_1, w_2, b</span>):</span><br><span class="line">    <span class="keyword">global</span> x_train, y_train, z_train, alpha</span><br><span class="line">    <span class="keyword">return</span> partial_w_1(w_1, w_2, b), partial_w_2(w_1, w_2, b), partial_b(w_1, w_2, b)</span><br></pre></td></tr></table></figure><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradient_desent</span>(<span class="params">w_1, w_2, b</span>):</span><br><span class="line">    <span class="keyword">global</span> x_train, y_train, z_train, alpha</span><br><span class="line">    dJ_dw1, dJ_dw2, dJ_db = calculate_gradient(w_1,w_2,b)</span><br><span class="line">    w_1_new = w_1 - alpha*dJ_dw1</span><br><span class="line">    w_2_new = w_2 - alpha*dJ_dw2</span><br><span class="line">    b_new = b - alpha*dJ_db</span><br><span class="line">    w_1 = w_1_new</span><br><span class="line">    w_2 = w_2_new</span><br><span class="line">    b = b_new</span><br><span class="line">    cost = compute_cost(w_1, w_2, b)</span><br><span class="line">    <span class="keyword">return</span> w_1, w_2, b, cost </span><br><span class="line"><span class="comment">## main function ##</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_iter):</span><br><span class="line">    w_1, w_2, b, now_cost = gradient_desent(w_1, w_2, b)</span><br><span class="line">    cost.append(now_cost)  </span><br><span class="line"><span class="comment">## 结果 ##</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;w1:<span class="subst">&#123;w_1&#125;</span>,w2:<span class="subst">&#123;w_2&#125;</span>,b:<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;model:z =<span class="subst">&#123;w_1&#125;</span>x+<span class="subst">&#123;w_2&#125;</span>y+<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">cost = np.array(cost)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,num_iter+<span class="number">1</span>),cost,marker = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="结果可视化"><a href="#结果可视化" class="headerlink" title="结果可视化"></a>结果可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>), facecolor=<span class="string">&#x27;lightyellow&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建 3D 坐标系</span></span><br><span class="line">ax = fig.add_subplot(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.scatter(x_train, y_train, z_train, marker=<span class="string">&quot;x&quot;</span>, c=<span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">y = np.linspace(<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line"><span class="comment"># 绘制 3D 图形</span></span><br><span class="line">ax.plot_surface(X, Y, Z=w_1*X+w_2*y+b, color=<span class="string">&#x27;g&#x27;</span>, alpha=<span class="number">0.6</span>) </span><br><span class="line">ax.<span class="built_in">set</span>(xlabel=<span class="string">&#x27;X&#x27;</span>, ylabel=<span class="string">&#x27;Y&#x27;</span>, zlabel=<span class="string">&#x27;Z&#x27;</span>, xlim=(<span class="number">0</span>, <span class="number">50</span>), ylim=(<span class="number">0</span>, <span class="number">50</span>), zlim=(<span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整视角</span></span><br><span class="line">ax.view_init(elev=<span class="number">30</span>, azim=<span class="number">75</span>)   <span class="comment"># 仰角与方位角</span></span><br><span class="line">     </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="数据验证：x-10-y-8。-按照MAT2041-HW05-solution，z-应约为-31-9"><a href="#数据验证：x-10-y-8。-按照MAT2041-HW05-solution，z-应约为-31-9" class="headerlink" title="数据验证：x = 10, y = 8。 按照MAT2041 HW05 solution，z 应约为 31.9"></a>数据验证：x = 10, y = 8。 按照MAT2041 HW05 solution，z 应约为 31.9</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_test  = <span class="number">10</span></span><br><span class="line">y_test = <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;z = <span class="subst">&#123;w_1*x_test+w_2*y_test+b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ML学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coursera ML 2023版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSC1002笔记</title>
      <link href="/2023/05/09/CSC1002%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/09/CSC1002%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇文章是-CUHK-SZ-CSC1002-23-spring课程assignment的代码-环境-python-3-10以上"><a href="#这篇文章是-CUHK-SZ-CSC1002-23-spring课程assignment的代码-环境-python-3-10以上" class="headerlink" title="这篇文章是 CUHK(SZ) CSC1002 23 spring课程assignment的代码 环境:(python 3.10以上)"></a>这篇文章是 CUHK(SZ) CSC1002 23 spring课程assignment的代码 环境:(python 3.10以上)</h1><h2 id="assignment-1-得分：93-100"><a href="#assignment-1-得分：93-100" class="headerlink" title="assignment 1 (得分：93/100):"></a>assignment 1 (得分：93/100):</h2><p><strong>这是数字华容道，分”9与16两个版本”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_same</span>(<span class="params">a : <span class="built_in">list</span>, b : <span class="built_in">list</span>, mode : <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    find out wether two board are same</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mode+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(mode+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] != b[i][j]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">limt_rand</span>(<span class="params">lst : <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    this function choose the number from a to b-1 randomly that is in list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    rand_variale = <span class="number">0</span> <span class="comment">#choose a random real number</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    rand_variale = <span class="built_in">int</span>(random()*<span class="built_in">len</span>(lst))  <span class="comment">#choose a random real number in [0,len(lst))</span></span><br><span class="line">    ans = lst[rand_variale]</span><br><span class="line">    lst.remove(ans) <span class="comment">#del what we choose to avoid redundancy</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_board</span>(<span class="params">board : <span class="built_in">list</span>, mode : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    print the board for 3*3 (mode 1) and 4*4 (mode 2) puzzle</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    value = <span class="number">0</span> <span class="comment">#value on the board</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mode+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(mode+<span class="number">2</span>):</span><br><span class="line">            value = board[i][j] <span class="comment">#the value we need to print</span></span><br><span class="line">            <span class="keyword">if</span>(value != <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">if</span>(value &lt; <span class="number">10</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>, value, end = <span class="string">&#x27; &#x27;</span>, sep = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(value, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end = <span class="string">&#x27;  &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">movement</span>(<span class="params">zero_position : <span class="built_in">tuple</span>[<span class="built_in">int</span>], board : <span class="built_in">list</span>, <span class="built_in">type</span> : <span class="built_in">str</span></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    the movement if you have determined what situation you need</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    zero = board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>]]  <span class="comment">#value of zero</span></span><br><span class="line">    tile1 = <span class="number">0</span> <span class="comment">#tile that the zero move to</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">type</span> == <span class="string">&#x27;l&#x27;</span>):</span><br><span class="line">        tile1 = board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>] - <span class="number">1</span>]</span><br><span class="line">        board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>] - <span class="number">1</span>] = zero</span><br><span class="line">        board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>]] = tile1</span><br><span class="line">        <span class="keyword">return</span> (zero_position[<span class="number">0</span>], zero_position[<span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">type</span> == <span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">        tile1 = board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>] + <span class="number">1</span>]</span><br><span class="line">        board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>] + <span class="number">1</span>] = zero</span><br><span class="line">        board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>]] = tile1</span><br><span class="line">        <span class="keyword">return</span> (zero_position[<span class="number">0</span>], zero_position[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">type</span> == <span class="string">&#x27;u&#x27;</span>):</span><br><span class="line">        tile1 = board[zero_position[<span class="number">0</span>] - <span class="number">1</span>][zero_position[<span class="number">1</span>]]</span><br><span class="line">        board[zero_position[<span class="number">0</span>] - <span class="number">1</span>][zero_position[<span class="number">1</span>]] = zero</span><br><span class="line">        board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>]] = tile1</span><br><span class="line">        <span class="keyword">return</span> (zero_position[<span class="number">0</span>] - <span class="number">1</span>, zero_position[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">type</span> == <span class="string">&#x27;d&#x27;</span>):</span><br><span class="line">        tile1 = board[zero_position[<span class="number">0</span>] + <span class="number">1</span>][zero_position[<span class="number">1</span>]]</span><br><span class="line">        board[zero_position[<span class="number">0</span>] + <span class="number">1</span>][zero_position[<span class="number">1</span>]] = zero</span><br><span class="line">        board[zero_position[<span class="number">0</span>]][zero_position[<span class="number">1</span>]] = tile1</span><br><span class="line">        <span class="keyword">return</span> (zero_position[<span class="number">0</span>] + <span class="number">1</span>, zero_position[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> zero</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">operate</span>(<span class="params">zero_position : <span class="built_in">tuple</span>[<span class="built_in">int</span>], board : <span class="built_in">list</span>, mode : <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">            l : <span class="built_in">str</span>, r : <span class="built_in">str</span>, u : <span class="built_in">str</span>, d : <span class="built_in">str</span>, total_steps : <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    test where the tile can go</span></span><br><span class="line"><span class="string">    the return value is an integer that represent:</span></span><br><span class="line"><span class="string">    0:no limits, 1:left_limit, 2:righ_limit, 3:up_limit, 4:down_limit,</span></span><br><span class="line"><span class="string">    5:left_up limit, 6:right_up limit, 7:left_down limit, 8:right_down limit</span></span><br><span class="line"><span class="string">    and do the operation for each term.</span></span><br><span class="line"><span class="string">    finally, return the new_zero tile </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print_board(board, mode)</span><br><span class="line">    size = <span class="built_in">len</span>(board[<span class="number">0</span>])-<span class="number">1</span> <span class="comment">#the size of the board (start from 0)</span></span><br><span class="line">    total_steps += <span class="number">1</span> <span class="comment">#add one steps</span></span><br><span class="line">    ipt = <span class="number">0</span> <span class="comment">#input</span></span><br><span class="line">    <span class="keyword">if</span>((zero_position[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] != size)): <span class="comment"># 3</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (left-&quot;</span>+ l +<span class="string">&quot;, right-&quot;</span>+ r +<span class="string">&quot;, down-&quot;</span>+ d +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == l):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;l&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == r):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;r&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == d):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;d&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">0</span>] != <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">0</span>] != size)): <span class="comment"># 1</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (right-&quot;</span>+ r +<span class="string">&quot;, up-&quot;</span>+ r +<span class="string">&quot;,down-&quot;</span>+ d +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == r):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;r&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == u):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;u&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == d):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;d&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">0</span>] == size) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] !=<span class="number">0</span>) <span class="keyword">and</span>(zero_position[<span class="number">1</span>] != size)): <span class="comment"># 4</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (left-&quot;</span>+ l +<span class="string">&quot;, right-&quot;</span>+ r +<span class="string">&quot;, up-&quot;</span>+ u +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == l):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;l&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == r):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;r&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == u):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;u&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">1</span>] == size) <span class="keyword">and</span> (zero_position[<span class="number">0</span>] != <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">0</span>] != size)): <span class="comment"># 2</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (left-&quot;</span>+ l +<span class="string">&quot;, up-&quot;</span>+ u +<span class="string">&quot;, down-&quot;</span>+ d +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == l):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;l&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == u):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;u&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == d):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;d&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -=<span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] == <span class="number">0</span>)): <span class="comment"># 5</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (right-&quot;</span>+ r +<span class="string">&quot;, down-&quot;</span>+ d +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == r):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;r&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == d):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;d&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">0</span>] == size) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] == <span class="number">0</span>)): <span class="comment"># 7</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (right-&quot;</span>+ r +<span class="string">&quot;, up-&quot;</span>+ r +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == r):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;r&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == u):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;u&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] == size)): <span class="comment"># 6</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (left-&quot;</span>+ l +<span class="string">&quot;, down-&quot;</span>+ d +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == l):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;l&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == d):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;d&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">elif</span>((zero_position[<span class="number">0</span>] == size) <span class="keyword">and</span> (zero_position[<span class="number">1</span>] == size)): <span class="comment"># 8</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (left-&quot;</span>+ l +<span class="string">&quot;, up-&quot;</span>+ u +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == l):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;l&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == u):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;u&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 0</span></span><br><span class="line">        ipt = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (left-&quot;</span>+ l +<span class="string">&quot;, right-&quot;</span>+ r +<span class="string">&quot;, up-&quot;</span>+ u +<span class="string">&quot;, down-&quot;</span>+ d +<span class="string">&quot;) &gt; &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(ipt == l):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;l&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == r):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board,<span class="string">&#x27;r&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == u):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;u&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(ipt == d):</span><br><span class="line">            <span class="keyword">return</span> (movement(zero_position, board, <span class="string">&#x27;d&#x27;</span>),total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total_steps -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\ninvalid input, plz enter again!\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (zero_position, total_steps)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">test : <span class="built_in">list</span>[<span class="built_in">int</span>], zero_position : <span class="built_in">tuple</span>[<span class="built_in">int</span>], mod : <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    test whether the game is valid</span></span><br><span class="line"><span class="string">    true for valid, false for invalid</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ans = <span class="number">0</span> <span class="comment">#number of inversed pair</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(test)):</span><br><span class="line">            <span class="keyword">if</span>(test[j] &lt; test[i]):</span><br><span class="line">                ans+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(mod == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>((ans % <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#for 4*4 mod</span></span><br><span class="line">        <span class="keyword">if</span>((ans % <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span>(((zero_position[<span class="number">0</span>] - <span class="number">3</span>) % <span class="number">2</span>) == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(((zero_position[<span class="number">0</span>] - <span class="number">3</span>) % <span class="number">2</span>) != <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eight_tile_generator</span>() -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    generate 8 tiles mode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    test = [<span class="number">0</span>]*<span class="number">9</span> <span class="comment">#a list aim to find out is the puzzle valid?</span></span><br><span class="line">    is_first = <span class="literal">True</span></span><br><span class="line">    lst = []</span><br><span class="line">    zero_position = (<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    pointor = <span class="number">0</span></span><br><span class="line">    board = []</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">not</span> is_valid(test, zero_position, <span class="number">1</span>) <span class="keyword">or</span> is_first):</span><br><span class="line">        test = [<span class="number">0</span>]*<span class="number">8</span> <span class="comment">#a list aim to find out is the puzzle valid?</span></span><br><span class="line">        pointor = <span class="number">0</span></span><br><span class="line">        lst=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]  <span class="comment">#the lst list out all the posible value of a tile</span></span><br><span class="line">        board = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]  <span class="comment">#3*3 board from (0,0) to (2,2)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                ans = limt_rand(lst)</span><br><span class="line">                board[i][j] = ans</span><br><span class="line">                <span class="keyword">if</span>(ans != <span class="number">0</span>):</span><br><span class="line">                    test[pointor] = ans</span><br><span class="line">                    pointor += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span>(ans == <span class="number">0</span>): <span class="comment">#note the position of zero</span></span><br><span class="line">                    zero_position = (i,j)</span><br><span class="line">        is_first = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> (board, zero_position)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fifteen_tile_generator</span>() -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    generate 15 tiles mode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    is_first = <span class="literal">True</span></span><br><span class="line">    zero_position = (<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    test = [<span class="number">0</span>]*<span class="number">16</span> <span class="comment">#this is to test whether the problem is solvable</span></span><br><span class="line">    lst = []</span><br><span class="line">    board = []</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">not</span> is_valid(test, zero_position, <span class="number">2</span>) <span class="keyword">or</span> is_first):</span><br><span class="line">        lst=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]  <span class="comment">#the lst list out all the posible value of a tile</span></span><br><span class="line">        board = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]  <span class="comment">#3*3 board from (0,0) to (2,2)</span></span><br><span class="line">        test = [<span class="number">0</span>]*<span class="number">15</span> <span class="comment">#this is to test whether the problem is solvable</span></span><br><span class="line">        pointor = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                ans = limt_rand(lst)</span><br><span class="line">                board[i][j] = ans</span><br><span class="line">                <span class="keyword">if</span>(ans != <span class="number">0</span>):</span><br><span class="line">                    test[pointor] = ans</span><br><span class="line">                    pointor += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span>(ans == <span class="number">0</span>): <span class="comment">#note down the zero&#x27;s podition</span></span><br><span class="line">                    zero_position = (i,j)</span><br><span class="line">        is_first = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> (board, zero_position)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mode_1</span>(<span class="params">l : <span class="built_in">str</span>, r : <span class="built_in">str</span>, u : <span class="built_in">str</span>, d : <span class="built_in">str</span>, total_steps : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mode for 8 tiles</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    board, zero_position = eight_tile_generator()</span><br><span class="line">    final = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]] <span class="comment">#final answer</span></span><br><span class="line">    poiner = <span class="number">1</span> <span class="comment"># to keep entries in final in order</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            final[i][j] = poiner</span><br><span class="line">            poiner+=<span class="number">1</span></span><br><span class="line">    final[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span> <span class="comment">#generate final answer</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">not</span> is_same(board,final,<span class="number">1</span>)):</span><br><span class="line">        zero_position, total_steps = operate(zero_position, board, <span class="number">1</span>, l, r, u, d, total_steps)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nstep : %d&quot;</span> %total_steps)</span><br><span class="line">    print_board(board,<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n////////////  well done!, total steps : &quot;</span> + <span class="built_in">str</span>(total_steps) +<span class="string">&quot; ///////////\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mode_2</span>(<span class="params">l : <span class="built_in">str</span>, r : <span class="built_in">str</span>, u : <span class="built_in">str</span>, d : <span class="built_in">str</span>, total_steps : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mode for 15 tiles</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    board, zero_position = fifteen_tile_generator()</span><br><span class="line">    final = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]] <span class="comment"># this is the final step</span></span><br><span class="line">    poiner = <span class="number">1</span> <span class="comment"># to keep entries in final in order</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): <span class="comment">#generate final</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            final[i][j] = poiner</span><br><span class="line">            poiner+=<span class="number">1</span></span><br><span class="line">    final[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">not</span> is_same(board,final,<span class="number">2</span>)):</span><br><span class="line">        zero_position, total_steps = operate(zero_position, board, <span class="number">2</span>, l, r, u, d, total_steps)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nstep : %d&quot;</span> %total_steps)</span><br><span class="line">    print_board(board,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n////////////  well done! total steps : &quot;</span> + <span class="built_in">str</span>(total_steps) + <span class="string">&quot;  ///////////\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    mode_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    total_steps = <span class="number">0</span></span><br><span class="line">    mode_name = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Welcome to Kinley’s puzzle game, you will be prompted to choose playing mode,</span></span><br><span class="line"><span class="string">8-number mode(mode 1) or 15-number mode(mode 2):</span></span><br><span class="line"><span class="string">An 8-number puzzle has a square-framed board consisting of 8 square tiles, numbered 1 to 8, </span></span><br><span class="line"><span class="string">initially placed in random order,</span></span><br><span class="line"><span class="string">while a 15-number puzzle there are 15 numbered square tiles, from 1 to 15. </span></span><br><span class="line"><span class="string">The game board has an empty space where one of adjacent tilesslides to. </span></span><br><span class="line"><span class="string">The objective of the game is to re-arrange the tiles into a sequential order by their numbers </span></span><br><span class="line"><span class="string">(left to right, top to bottom) by repeatedly making sliding moves (left, right, up or down). </span></span><br><span class="line"><span class="string">The following figure shows an example of one 8-number puzzle where “INITIAL” is the starting point of the game, </span></span><br><span class="line"><span class="string">and the player needs to repeatedly slide one adjacent tile, one at a time, to the unoccupied space (the empty space) </span></span><br><span class="line"><span class="string">until all numbers appear sequentially, ordered from left to right, top to bottom, shown as “FINAL”.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        total_steps = <span class="number">0</span></span><br><span class="line">        mode_name = <span class="built_in">input</span>(<span class="string">&quot;Enter “1” for 8-puzzle, “2” for 15-puzzle or “q” to end the game &gt; &quot;</span>)</span><br><span class="line">        l,r,u,d = <span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;d&#x27;</span></span><br><span class="line">        correct_input = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span>(mode_name == <span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span>(mode_name == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            correct_input = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">not</span> correct_input):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    l,r,u,d= <span class="built_in">input</span>(<span class="string">&quot;plz enter letter represent left, right, up ,down &gt; &quot;</span>)</span><br><span class="line">                    correct_input = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span>(l == r <span class="keyword">or</span> l ==u <span class="keyword">or</span> l == d <span class="keyword">or</span> r == u <span class="keyword">or</span> r == d <span class="keyword">or</span> u == d): </span><br><span class="line">                        <span class="comment">#whether input is same</span></span><br><span class="line">                        correct_input = <span class="literal">False</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;don&#x27;t use same letter !&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;reminder: left-&quot;</span> + l + <span class="string">&quot;, right-&quot;</span> + r + <span class="string">&quot;, up-&quot;</span> + u + <span class="string">&quot;, down-&quot;</span> + d)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;invalid input, plz do not use anything to divide 4 leters, eg: &#x27;lrud&#x27;&quot;</span>)</span><br><span class="line">            mode_1(l,r,u,d, total_steps)</span><br><span class="line">        <span class="keyword">elif</span>(mode_name == <span class="string">&#x27;2&#x27;</span>):</span><br><span class="line">            correct_input = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">not</span> correct_input):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    l,r,u,d= <span class="built_in">input</span>(<span class="string">&quot;plz enter letter represent left, right, up ,down &gt; &quot;</span>)</span><br><span class="line">                    correct_input = <span class="literal">True</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;reminder: left-&quot;</span> + l + <span class="string">&quot;, right-&quot;</span> + r + <span class="string">&quot;, up-&quot;</span> + u + <span class="string">&quot;, down-&quot;</span> + d)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;invalid input, plz do not use anything to divide 4 leters, eg: &#x27;lrud&#x27;&quot;</span>)</span><br><span class="line">            mode_2(l,r,u,d, total_steps)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot; invalid input, plz enter again!&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="assignment-2-得分：93-100"><a href="#assignment-2-得分：93-100" class="headerlink" title="assignment 2 (得分：93/100):"></a>assignment 2 (得分：93/100):</h2><p><strong>这是重力四子棋，用python自带的turtle库实现(只能在python3.10及以上版本运行)”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tt</span><br><span class="line"></span><br><span class="line">scn = tt.Screen()</span><br><span class="line">g_canvas = scn.getcanvas()</span><br><span class="line">p = <span class="string">&quot;purple&quot;</span> <span class="comment">#simpler representation</span></span><br><span class="line">b = <span class="string">&quot;dark blue&quot;</span></span><br><span class="line">recent_click = [<span class="number">0</span>,<span class="number">0</span>] <span class="comment">#restore which column the pointor click and the first space row in each column</span></span><br><span class="line"><span class="comment">#the position of the board</span></span><br><span class="line">time = <span class="number">0</span> <span class="comment">#how many process</span></span><br><span class="line">rate = <span class="number">4</span></span><br><span class="line">board = [[<span class="number">0</span>*<span class="number">9</span>],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>,<span class="number">150</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>,<span class="number">130</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>,<span class="number">110</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>, <span class="number">90</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>, <span class="number">70</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>, <span class="number">50</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>, <span class="number">30</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)],</span><br><span class="line">         [<span class="number">0</span>] + [(x + <span class="number">50</span>, <span class="number">10</span>*rate + <span class="number">130</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)]]</span><br><span class="line"><span class="comment">#absolute position for every &quot;coordinate&quot;</span></span><br><span class="line"></span><br><span class="line">col_pos = [<span class="number">0</span>] + [(x + <span class="number">50</span>, <span class="number">790</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>*rate, <span class="number">170</span>*rate, <span class="number">20</span>*rate)] <span class="comment">#the position of the bar of each column</span></span><br><span class="line">col = [(tt.Turtle, tt.Turtle)] <span class="comment">#col[i][0] : the main black bar, col[i][1] : color bar</span></span><br><span class="line">in_board = [[<span class="number">0</span>]*<span class="number">10</span>, <span class="comment">#each row represent a column</span></span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]+[<span class="string">&#x27;0&#x27;</span>]*<span class="number">9</span>,</span><br><span class="line">            [<span class="number">0</span>]*<span class="number">10</span>] <span class="comment">#purple and blue in board, p for purple, b for blue </span></span><br><span class="line"></span><br><span class="line">the_turtle  = [[<span class="number">0</span>]*<span class="number">9</span>, <span class="comment">#each row represent a column</span></span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>,</span><br><span class="line">               [<span class="number">0</span>]+[tt.Turtle()]*<span class="number">8</span>] <span class="comment">#restore circle turtle objects</span></span><br><span class="line"></span><br><span class="line">path = [] <span class="comment">#for cmp funcion to denote the path </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle_generator</span>(<span class="params">side : <span class="built_in">str</span>, col : <span class="built_in">int</span>, row : <span class="built_in">int</span></span>) -&gt; tt.Turtle:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; this function generate a circle in the given column</span></span><br><span class="line"><span class="string">        causion: the turtle we generated always hide at first &quot;&quot;&quot;</span></span><br><span class="line">    scn.tracer(n=<span class="number">5000</span>)</span><br><span class="line">    t = tt.Turtle()</span><br><span class="line">    t.shape(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">    t.shapesize(<span class="number">3</span>)</span><br><span class="line">    t.color(side)</span><br><span class="line">    t.penup()</span><br><span class="line">    t.setposition(col,row)</span><br><span class="line">    t.ht()</span><br><span class="line">    scn.tracer(n=<span class="number">100</span>, delay=<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">col_generator</span>(<span class="params">col : <span class="built_in">int</span>, row : <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>[tt.Turtle]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; this function generate the black bar in each column</span></span><br><span class="line"><span class="string">        causion: the turtle we generated always hide at first &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#generate color bar colar,this is why the bar can change the color</span></span><br><span class="line">    color = tt.Turtle()</span><br><span class="line">    color.ht()</span><br><span class="line">    color.shape(<span class="string">&quot;square&quot;</span>)</span><br><span class="line">    color.color(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    color.penup()</span><br><span class="line">    color.speed(<span class="number">0</span>)</span><br><span class="line">    color.setposition(col,row)</span><br><span class="line">    color.shapesize(<span class="number">0.7</span>,<span class="number">3.5</span>)</span><br><span class="line">    color.setposition(col,row)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#generate main black bar</span></span><br><span class="line">    t_main = tt.Turtle()</span><br><span class="line">    t_main.ht()</span><br><span class="line">    t_main.shape(<span class="string">&quot;square&quot;</span>)</span><br><span class="line">    t_main.penup()</span><br><span class="line">    t_main.speed(<span class="number">0</span>)</span><br><span class="line">    t_main.setposition(col,row)</span><br><span class="line">    t_main.shapesize(<span class="number">0.5</span>,<span class="number">3</span>)</span><br><span class="line">    t_main.setposition(col,row)</span><br><span class="line">    <span class="keyword">return</span> (t_main, color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">motion_color_reveal</span>(<span class="params">event : <span class="built_in">any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; when we move mouse to the bar area, reveal the color bar &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> board, col_pos, col, p, b, time</span><br><span class="line">    x = event.x</span><br><span class="line">    y = event.y</span><br><span class="line">    <span class="keyword">if</span>(time % <span class="number">2</span> == <span class="number">0</span>): <span class="comment">#purple</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">            col[i][<span class="number">1</span>].color(p)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#blue</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">            col[i][<span class="number">1</span>].color(b)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= col_pos[i][<span class="number">0</span>] + <span class="number">28</span> <span class="keyword">and</span> x &gt;= col_pos[i][<span class="number">0</span>] - <span class="number">38</span>): <span class="comment">#col 1&amp;2</span></span><br><span class="line">            col[i][<span class="number">1</span>].st()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            col[i][<span class="number">1</span>].ht()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= col_pos[i][<span class="number">0</span>] + <span class="number">20</span> <span class="keyword">and</span> x &gt;= col_pos[i][<span class="number">0</span>] - <span class="number">45</span>): <span class="comment">#col 3&amp;4</span></span><br><span class="line">            col[i][<span class="number">1</span>].st()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            col[i][<span class="number">1</span>].ht()</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= col_pos[<span class="number">5</span>][<span class="number">0</span>] + <span class="number">15</span> <span class="keyword">and</span> x &gt;= col_pos[<span class="number">5</span>][<span class="number">0</span>] - <span class="number">52</span>): <span class="comment">#col 5</span></span><br><span class="line">        col[<span class="number">5</span>][<span class="number">1</span>].st()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        col[<span class="number">5</span>][<span class="number">1</span>].ht()</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= col_pos[<span class="number">6</span>][<span class="number">0</span>] + <span class="number">11</span> <span class="keyword">and</span> x &gt;= col_pos[<span class="number">6</span>][<span class="number">0</span>] - <span class="number">55</span>): <span class="comment">#col 6</span></span><br><span class="line">        col[<span class="number">6</span>][<span class="number">1</span>].st()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        col[<span class="number">6</span>][<span class="number">1</span>].ht()</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= col_pos[<span class="number">7</span>][<span class="number">0</span>] + <span class="number">5</span> <span class="keyword">and</span> x &gt;= col_pos[<span class="number">7</span>][<span class="number">0</span>] - <span class="number">58</span>): <span class="comment">#col 7</span></span><br><span class="line">        col[<span class="number">7</span>][<span class="number">1</span>].st()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        col[<span class="number">7</span>][<span class="number">1</span>].ht()</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= col_pos[<span class="number">8</span>][<span class="number">0</span>] + <span class="number">4</span> <span class="keyword">and</span> x &gt;= col_pos[<span class="number">8</span>][<span class="number">0</span>] - <span class="number">64</span>): <span class="comment">#col 8</span></span><br><span class="line">        col[<span class="number">8</span>][<span class="number">1</span>].st()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        col[<span class="number">8</span>][<span class="number">1</span>].ht()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_bar_color</span>(<span class="params">side : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; this function is to change the color of all 8 bar &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> col</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        col[i][<span class="number">1</span>].color(side)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">position_turtle</span>(<span class="params">x : <span class="built_in">int</span>, y : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; find where the position cilcked and give it to</span></span><br><span class="line"><span class="string">    &quot;recent click&quot;  intager and set the turtle and chack if</span></span><br><span class="line"><span class="string">     it is the final &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> recent_click, board, col_pos, col, p, b, in_board, time, scn, the_turtle</span><br><span class="line">    scn.title(<span class="string">&quot;A2_SDS_122090249_Source&quot;</span>) <span class="comment">#reset the title</span></span><br><span class="line">    scn.tracer(n = <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= col_pos[i][<span class="number">0</span>] + <span class="number">36.65</span> <span class="keyword">and</span> x &gt;= col_pos[i][<span class="number">0</span>] - <span class="number">36.65</span>):</span><br><span class="line">            recent_click[<span class="number">0</span>] = i</span><br><span class="line">            recent_click[<span class="number">1</span>] = in_board[i].index(<span class="string">&#x27;0&#x27;</span>) <span class="comment">#find the index of the first space</span></span><br><span class="line">            <span class="keyword">if</span>(recent_click[<span class="number">1</span>] &lt;= <span class="number">8</span> ): <span class="comment">#don&#x27;t flow out!</span></span><br><span class="line">                <span class="keyword">if</span>(time % <span class="number">2</span> == <span class="number">0</span>): <span class="comment">#purple turn</span></span><br><span class="line">                    c1 = circle_generator(p, board[recent_click[<span class="number">1</span>]][recent_click[<span class="number">0</span>]][<span class="number">0</span>], </span><br><span class="line">                                          board[recent_click[<span class="number">1</span>]][recent_click[<span class="number">0</span>]][<span class="number">1</span>])</span><br><span class="line">                    c1.st()</span><br><span class="line">                    the_turtle[recent_click[<span class="number">0</span>]][recent_click[<span class="number">1</span>]] = c1</span><br><span class="line">                    in_board[recent_click[<span class="number">0</span>]][recent_click[<span class="number">1</span>]] =<span class="string">&#x27;p&#x27;</span></span><br><span class="line">                    change_bar_color(b)</span><br><span class="line">                    <span class="keyword">if</span>(is_final() != <span class="number">0</span>):</span><br><span class="line">                        scn.listen()</span><br><span class="line">                        scn.onclick(none_cilck, add = <span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">else</span>: <span class="comment">#blue turn</span></span><br><span class="line">                    c1 = circle_generator(b, board[recent_click[<span class="number">1</span>]][recent_click[<span class="number">0</span>]][<span class="number">0</span>],</span><br><span class="line">                                          board[recent_click[<span class="number">1</span>]][recent_click[<span class="number">0</span>]][<span class="number">1</span>])</span><br><span class="line">                    c1.st()</span><br><span class="line">                    the_turtle[recent_click[<span class="number">0</span>]][recent_click[<span class="number">1</span>]] = c1</span><br><span class="line">                    in_board[recent_click[<span class="number">0</span>]][recent_click[<span class="number">1</span>]] =<span class="string">&#x27;b&#x27;</span></span><br><span class="line">                    change_bar_color(p)</span><br><span class="line">                    <span class="keyword">if</span>(is_final() != <span class="number">0</span>):</span><br><span class="line">                        scn.listen()</span><br><span class="line">                        scn.onclick(none_cilck, add = <span class="literal">False</span>)       </span><br><span class="line">                time += <span class="number">1</span> <span class="comment">#time calculator</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                scn.title(<span class="string">&quot;overflow!!!&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">    scn.tracer(n = <span class="number">100</span>, delay = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_final</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; check whether who win </span></span><br><span class="line"><span class="string">        0 as no one win, </span></span><br><span class="line"><span class="string">        1 as purple win,</span></span><br><span class="line"><span class="string">        2 as blue win</span></span><br><span class="line"><span class="string">        3 as is full&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> board, col_pos, col, p ,b, in_board, recent_click, time, scn, the_turtle, path</span><br><span class="line">    ans = <span class="number">0</span> <span class="comment">#the situation</span></span><br><span class="line">    bol = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(in_board)): <span class="comment">#is full</span></span><br><span class="line">        <span class="keyword">if</span>(in_board[i][<span class="number">8</span>] == <span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">            bol = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span>(bol):</span><br><span class="line">        scn.title(<span class="string">&quot;is full!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">if</span>(time % <span class="number">2</span> == <span class="number">0</span>):<span class="comment">#is purple win?</span></span><br><span class="line">            <span class="keyword">if</span>(cmp(<span class="string">&#x27;p&#x27;</span>)):</span><br><span class="line">                scn.title(<span class="string">&quot;purple win!!!&quot;</span>)</span><br><span class="line">                path = []</span><br><span class="line">                scn.listen()</span><br><span class="line">                scn.onclick(none_cilck, add = <span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(cmp(<span class="string">&#x27;b&#x27;</span>)):</span><br><span class="line">                scn.title(<span class="string">&quot;blue win!!!&quot;</span>)</span><br><span class="line">                path = []</span><br><span class="line">                scn.listen()</span><br><span class="line">                scn.onclick(none_cilck, add = <span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">side : <span class="built_in">str</span>, comp = [<span class="number">0</span>, <span class="number">0</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; compare wether the four nearest circle is same &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> path, board, col_pos, col, p ,b, in_board, recent_click, time, scn, the_turtle, path</span><br><span class="line">    i = <span class="number">1</span> <span class="comment">#the pointor</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">8</span>): <span class="comment">#col same</span></span><br><span class="line">        comp = [recent_click[<span class="number">0</span>], i]</span><br><span class="line">        <span class="keyword">while</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] == side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span> <span class="keyword">and</span> i &lt;= <span class="number">8</span>):</span><br><span class="line">            path.append(comp)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            comp =[recent_click[<span class="number">0</span>], i]</span><br><span class="line">            <span class="keyword">if</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] != side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                path = []</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(path) == <span class="number">4</span>):</span><br><span class="line">        hlt_path(path)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">8</span>): <span class="comment">#row same</span></span><br><span class="line">        comp = [i, recent_click[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">while</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] == side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span> <span class="keyword">and</span> i &lt;= <span class="number">8</span>):</span><br><span class="line">            path.append(comp)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            comp = [i, recent_click[<span class="number">1</span>]]</span><br><span class="line">            <span class="keyword">if</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] != side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                path = []</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(path) == <span class="number">4</span>):</span><br><span class="line">        hlt_path(path)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">8</span>): <span class="comment">#lean same 1</span></span><br><span class="line">        <span class="keyword">if</span>(recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i &gt; <span class="number">0</span> </span><br><span class="line">           <span class="keyword">and</span> recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i &lt;= <span class="number">8</span>):</span><br><span class="line">            comp = [i, recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i]</span><br><span class="line">            <span class="keyword">while</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] == side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                path.append(comp)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                comp = [i, recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i]</span><br><span class="line">                <span class="keyword">if</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] != side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                    path = []</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(path) == <span class="number">4</span>):</span><br><span class="line">        hlt_path(path)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">8</span>): <span class="comment">#lean same 2</span></span><br><span class="line">        <span class="keyword">if</span>(recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i &gt; <span class="number">0</span> </span><br><span class="line">           <span class="keyword">and</span> recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i &lt;= <span class="number">8</span>):</span><br><span class="line">            comp = [recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i, i]</span><br><span class="line">            <span class="keyword">while</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] == side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                path.append(comp)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                comp = [recent_click[<span class="number">1</span>] + recent_click[<span class="number">0</span>] - i,i]</span><br><span class="line">                <span class="keyword">if</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] != side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                    path = []</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(path) == <span class="number">4</span>):</span><br><span class="line">        hlt_path(path)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">8</span>): <span class="comment">#lean same 3</span></span><br><span class="line">        <span class="keyword">if</span>(recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i &gt; <span class="number">0</span> </span><br><span class="line">           <span class="keyword">and</span> ((recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i) &lt;= <span class="number">8</span>)):</span><br><span class="line">            comp = [recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i,  i]</span><br><span class="line">            <span class="keyword">while</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] == side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                path.append(comp)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                comp = [recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i, i]</span><br><span class="line">                <span class="keyword">if</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] != side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                    path = []</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(path) == <span class="number">4</span>):</span><br><span class="line">        hlt_path(path)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">8</span>): <span class="comment">#lean same 4</span></span><br><span class="line">        <span class="keyword">if</span>((recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i) &gt; <span class="number">0</span> </span><br><span class="line">           <span class="keyword">and</span> (recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i) &lt;= <span class="number">8</span>):</span><br><span class="line">            comp = [i, recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i]</span><br><span class="line">            <span class="keyword">while</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] == side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                path.append(comp)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                comp = [i, recent_click[<span class="number">1</span>] - recent_click[<span class="number">0</span>] + i]</span><br><span class="line">                <span class="keyword">if</span>(in_board[comp[<span class="number">0</span>]][comp[<span class="number">1</span>]] != side <span class="keyword">and</span> <span class="built_in">len</span>(path) &lt; <span class="number">4</span>):</span><br><span class="line">                    path = []</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(path) == <span class="number">4</span>):</span><br><span class="line">        hlt_path(path)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>                    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hlt_path</span>(<span class="params">path : <span class="built_in">list</span>[<span class="built_in">list</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; highlight the wining point &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> the_turtle, scn, board</span><br><span class="line">    scn.tracer(n = <span class="number">7000</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(path)):</span><br><span class="line">        the_turtle[path[i][<span class="number">0</span>]][path[i][<span class="number">1</span>]].pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">        the_turtle[path[i][<span class="number">0</span>]][path[i][<span class="number">1</span>]].shapesize(outline = <span class="number">6</span>)</span><br><span class="line">    scn.tracer(n = <span class="number">100</span>, delay =<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">none_cilck</span>(<span class="params">x : <span class="built_in">int</span>, y : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;invalid the mouse operation&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">global</span> board, col_pos, col, p ,b, in_board, recent_click, time, scn, the_turtle, g_canvas</span><br><span class="line">    <span class="comment">#define the screen</span></span><br><span class="line">    scn.setworldcoordinates(<span class="number">13</span>,<span class="number">800</span>,<span class="number">800</span>,<span class="number">13</span>)</span><br><span class="line">    scn.title(<span class="string">&quot;A2_SDS_122090249_Source&quot;</span>)</span><br><span class="line">    scn.tracer(n = <span class="number">100</span>, delay = <span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#define the column</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        col.append(col_generator(col_pos[i][<span class="number">0</span>], col_pos[i][<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        col[i][<span class="number">0</span>].st()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#motion of mouse on screen</span></span><br><span class="line">    g_canvas.bind(<span class="string">&quot;&lt;Motion&gt;&quot;</span>, motion_color_reveal)</span><br><span class="line">    scn.listen()</span><br><span class="line">    scn.onclick(position_turtle)</span><br><span class="line">    scn.mainloop()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="assignment-3-得分：100-100"><a href="#assignment-3-得分：100-100" class="headerlink" title="assignment 3 (得分：100/100):"></a>assignment 3 (得分：100/100):</h2><p><strong>这是贪吃蛇，，但是不以碰撞自身判定结束而是以被monster抓获判定，这个小游戏使用了python自带的turtle库(只能在python3.10及以上版本运行)”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tt</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> atan, pi</span><br><span class="line"></span><br><span class="line">g_scn = <span class="number">0</span> <span class="comment">#the screan object</span></span><br><span class="line">g_intro = <span class="number">0</span> <span class="comment">#the introduction bar</span></span><br><span class="line">g_status = <span class="number">0</span> <span class="comment">#the playing area</span></span><br><span class="line">g_keypressed = <span class="string">&quot;Paused&quot;</span> <span class="comment">#the recent key press</span></span><br><span class="line">g_time = <span class="number">0</span> <span class="comment">#globaltime</span></span><br><span class="line">g_snake = <span class="number">0</span> <span class="comment">#the snake</span></span><br><span class="line">g_snake_pos = [(<span class="number">0</span>,<span class="number">0</span>)] <span class="comment">#the position of snake </span></span><br><span class="line">g_snake_sz = <span class="number">5</span> <span class="comment">#the len of the snake</span></span><br><span class="line">g_contact = <span class="number">0</span> <span class="comment">#total score player get</span></span><br><span class="line">g_food_pos = [] <span class="comment">#the position of food</span></span><br><span class="line">g_food_value = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment">#the value of each food</span></span><br><span class="line">g_food_condition = [<span class="literal">True</span>]*<span class="number">5</span> <span class="comment">#a list of bool object reprecent hide and unhide</span></span><br><span class="line">g_food_object = [] <span class="comment">#the food object</span></span><br><span class="line">g_eated = [] <span class="comment">#the food that is eaten</span></span><br><span class="line">g_is_space = <span class="literal">False</span> <span class="comment">#how many time space, odd: True, even: False</span></span><br><span class="line">g_last_dir = <span class="number">0</span> <span class="comment">#how the last input befor space </span></span><br><span class="line">g_is_eating = <span class="literal">True</span> <span class="comment">#test if  snake are eating</span></span><br><span class="line">g_is_end = <span class="literal">False</span> <span class="comment">#recorde if it is end</span></span><br><span class="line">g_is_win = <span class="literal">False</span> <span class="comment">#is win but not end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#default setings</span></span><br><span class="line">COLOR_BODY = (<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line">COLOR_HEAD = <span class="string">&quot;red&quot;</span></span><br><span class="line">COLOR_MONSTER = <span class="string">&quot;purple&quot;</span></span><br><span class="line">FONT = (<span class="string">&quot;Arial&quot;</span>,<span class="number">16</span>,<span class="string">&quot;normal&quot;</span>)</span><br><span class="line"></span><br><span class="line">KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_SPACE = \</span><br><span class="line">       <span class="string">&quot;Up&quot;</span>, <span class="string">&quot;Down&quot;</span>, <span class="string">&quot;Left&quot;</span>, <span class="string">&quot;Right&quot;</span>, <span class="string">&quot;space&quot;</span></span><br><span class="line"></span><br><span class="line">HEADING_BY_KEY = &#123;KEY_UP:<span class="number">90</span>, KEY_DOWN:<span class="number">270</span>, KEY_LEFT:<span class="number">180</span>, KEY_RIGHT:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#the &quot;tiles position&quot;</span></span><br><span class="line"><span class="comment">#20*20 tile and the center point is on the coordinate</span></span><br><span class="line">g_x = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">240</span>, <span class="number">260</span>, <span class="number">20</span>)]</span><br><span class="line">g_y = [y <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">280</span>, <span class="number">220</span>, <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Screan_setup</span>() -&gt; tt.TurtleScreen:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; set up the screan &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    scn = tt.Screen()</span><br><span class="line">    scn.tracer(<span class="number">0</span>)    <span class="comment"># disable auto screen refresh, 0=disable, 1=enable</span></span><br><span class="line">    scn.title(<span class="string">&quot;Snake by Lei Mingcong&quot;</span>)</span><br><span class="line">    scn.setup(<span class="number">500</span>+<span class="number">120</span>, <span class="number">500</span>+<span class="number">120</span>+<span class="number">80</span>)</span><br><span class="line">    scn.mode(<span class="string">&quot;standard&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> scn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_turtle</span>(<span class="params">x : <span class="built_in">int</span>, y : <span class="built_in">int</span>, color=<span class="string">&quot;red&quot;</span>, border=<span class="string">&quot;black&quot;</span></span>) -&gt; tt.Turtle:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; create a turtle with default position, colar and outline &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    t = tt.Turtle(<span class="string">&quot;square&quot;</span>)</span><br><span class="line">    t.color(border, color)</span><br><span class="line">    t.up()</span><br><span class="line">    t.goto(x,y)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">configure_play_area</span>() -&gt; <span class="built_in">tuple</span>[tt.Turtle]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; create the player area and introduction bar &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># motion border</span></span><br><span class="line">    m = create_turtle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    m.shapesize(<span class="number">25</span>,<span class="number">25</span>,<span class="number">5</span>)</span><br><span class="line">    m.goto(<span class="number">0</span>,-<span class="number">40</span>)  <span class="comment"># shift down half the status</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># status border </span></span><br><span class="line">    s = create_turtle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    s.shapesize(<span class="number">4</span>,<span class="number">25</span>,<span class="number">5</span>)</span><br><span class="line">    s.goto(<span class="number">0</span>,<span class="number">250</span>)  <span class="comment"># shift up half the motion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># introduction</span></span><br><span class="line">    intro = create_turtle(-<span class="number">200</span>,<span class="number">150</span>)</span><br><span class="line">    intro.hideturtle()</span><br><span class="line">    intro.write(<span class="string">&quot;Click anywhere to start the game .....&quot;</span>, font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">16</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># statuses</span></span><br><span class="line">    status = create_turtle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    status.hideturtle()</span><br><span class="line">    status.goto(-<span class="number">200</span>,s.ycor()) <span class="comment">#y coordinate are same</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intro, status</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_status</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; update the movement &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_scn, g_intro, g_status, g_keypressed, g_time, g_contact</span><br><span class="line"></span><br><span class="line">    g_status.clear()</span><br><span class="line">    g_status.write(<span class="string">f&quot;Contact: <span class="subst">&#123;g_contact&#125;</span>  Time: <span class="subst">&#123;g_time&#125;</span>  Motion: <span class="subst">&#123;g_keypressed&#125;</span>&quot;</span>, font=(<span class="string">&#x27;arial&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    g_scn.update()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_arrowkey_pressed</span>(<span class="params">key : <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; when key pressed, update the introduction bar &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_keypressed, g_is_space, g_last_dir, g_is_end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(g_is_end):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(key == <span class="string">&quot;space&quot;</span>): </span><br><span class="line">        g_is_space = <span class="keyword">not</span> g_is_space</span><br><span class="line">        <span class="keyword">if</span>(g_is_space):</span><br><span class="line">            g_keypressed = <span class="string">&quot;Paused&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            g_keypressed = g_last_dir</span><br><span class="line">    <span class="keyword">elif</span>(<span class="keyword">not</span> g_is_space): <span class="comment">#if not pause</span></span><br><span class="line">        g_keypressed = key</span><br><span class="line">        g_last_dir = g_keypressed</span><br><span class="line">        set_snake_heading(key)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#if pause</span></span><br><span class="line">        g_is_space = <span class="literal">False</span> <span class="comment">#countinue</span></span><br><span class="line">        g_keypressed = key</span><br><span class="line">        g_last_dir = g_keypressed</span><br><span class="line">        set_snake_heading(key)</span><br><span class="line">    update_status()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_snake_heading</span>(<span class="params">key : <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; set the heading direction of snake &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_is_end</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(g_is_end):</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">#invalid the turtle generator that the snake head will stop updating after being catch</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(key <span class="keyword">in</span> HEADING_BY_KEY.keys()):</span><br><span class="line">        g_snake.setheading( HEADING_BY_KEY[key] ) <span class="comment">#set the positio that snake is heading</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>() -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; this funtion is to determine whether the movement is valid &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_snake, g_keypressed, g_snake_pos</span><br><span class="line"></span><br><span class="line">    x, y = g_snake.pos()</span><br><span class="line">    x, y = <span class="built_in">round</span>(x), <span class="built_in">round</span>(y)</span><br><span class="line">    valid = <span class="literal">True</span></span><br><span class="line">    <span class="comment">#is snake out of range?</span></span><br><span class="line">    <span class="keyword">if</span>((y &gt;= <span class="number">197</span> <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Up&quot;</span>) <span class="keyword">or</span> (y &lt;= -<span class="number">277</span> <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Down&quot;</span>) <span class="keyword">or</span></span><br><span class="line">       (x &gt;= <span class="number">237</span> <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Right&quot;</span>) <span class="keyword">or</span> (x &lt;= -<span class="number">237</span> <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Left&quot;</span>)):</span><br><span class="line">        valid = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#is snake crash itself?</span></span><br><span class="line">    <span class="keyword">if</span>(((x,y+<span class="number">20</span>) <span class="keyword">in</span> g_snake_pos <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Up&quot;</span>) <span class="keyword">or</span> ((x,y-<span class="number">20</span>) <span class="keyword">in</span> g_snake_pos <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Down&quot;</span>) <span class="keyword">or</span></span><br><span class="line">       ((x+<span class="number">20</span>,y) <span class="keyword">in</span> g_snake_pos <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Right&quot;</span>) <span class="keyword">or</span> ((x-<span class="number">20</span>,y) <span class="keyword">in</span> g_snake_pos <span class="keyword">and</span> g_keypressed == <span class="string">&quot;Left&quot;</span>)):</span><br><span class="line">        valid = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> valid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_timer_snake</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; main movement of the snake &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_keypressed, g_snake, g_snake_pos, g_food_pos, g_snake_sz</span><br><span class="line">    <span class="keyword">global</span> g_is_end, g_contact, g_is_eating, g_is_win, g_eated</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(g_is_end): <span class="comment">#if end, stop every thing</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    over = <span class="number">0</span> <span class="comment">#the turtle that print &quot;Game over&quot;</span></span><br><span class="line">    x_s, y_s = g_snake.pos() <span class="comment">#position of snake head</span></span><br><span class="line">    x_s, y_s = <span class="built_in">round</span>(x_s), <span class="built_in">round</span>(y_s) <span class="comment">#use &quot;smaller than four ignore, bigger than five added method to change it into integer&quot;</span></span><br><span class="line">    x_m, y_m = g_monster.pos() <span class="comment">#position of monster</span></span><br><span class="line">    x_m, y_m = <span class="built_in">round</span>(x_m), <span class="built_in">round</span>(y_m)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(x_s - x_m) &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="built_in">abs</span>(y_s-y_m) &lt; <span class="number">20</span>): <span class="comment">#test is end</span></span><br><span class="line">        g_is_end = <span class="literal">True</span></span><br><span class="line">        over = create_turtle(x_m+<span class="number">10</span>, y_m+<span class="number">10</span>,<span class="string">&quot;purple&quot;</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line">        over. pencolor(<span class="string">&quot;purple&quot;</span>)</span><br><span class="line">        over.ht()</span><br><span class="line">        over.write(<span class="string">&quot;Game over!!&quot;</span>, font=(<span class="string">&#x27;arial&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">        over.goto(x_m, y_m)</span><br><span class="line">        over.st()</span><br><span class="line">        g_scn.update()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(g_keypressed == <span class="string">&quot;Paused&quot;</span>): <span class="comment">#if paused, stop counting but still can be catch</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> g_is_eating):</span><br><span class="line">            g_scn.ontimer(on_timer_snake, <span class="number">200</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            g_scn.ontimer(on_timer_snake,<span class="number">300</span>) <span class="comment">#do not try to use pause to eat faster, see row 227 !!!!!</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(is_valid()): <span class="comment">#is the movement valid?</span></span><br><span class="line">        <span class="comment"># Clone the head as body</span></span><br><span class="line">        g_snake.color(*COLOR_BODY)</span><br><span class="line">        g_snake.stamp()</span><br><span class="line">        g_snake.color(COLOR_HEAD)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Advance snake</span></span><br><span class="line">        g_snake.forward(<span class="number">20</span>)</span><br><span class="line">        x, y = g_snake.pos()</span><br><span class="line">        x = <span class="built_in">round</span>(x)</span><br><span class="line">        y = <span class="built_in">round</span>(y)</span><br><span class="line">        g_snake_pos = [(x,y)] + g_snake_pos.copy()</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(g_snake.stampItems) &gt; g_snake_sz):</span><br><span class="line">            <span class="comment"># Shifting or extending the tail.</span></span><br><span class="line">            <span class="comment"># Remove the last square on Shifting.</span></span><br><span class="line">            g_snake.clearstamps(<span class="number">1</span>)</span><br><span class="line">            g_snake_pos.pop()</span><br><span class="line">            <span class="keyword">if</span>(g_is_eating <span class="keyword">and</span> (<span class="built_in">len</span>(g_snake.stampItems) == g_snake_sz)): <span class="comment">#is eating and fully extend</span></span><br><span class="line">                g_is_eating = <span class="literal">False</span> <span class="comment">#end the eating motion</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(g_is_win <span class="keyword">and</span> (<span class="built_in">len</span>(g_snake.stampItems) == g_snake_sz)): <span class="comment">#is win and fully extend</span></span><br><span class="line">                over = create_turtle(x_s+<span class="number">5</span>, y_s+<span class="number">5</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">                over.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">                over.ht()</span><br><span class="line">                over.write(<span class="string">&quot;Winner!!&quot;</span>, font=(<span class="string">&#x27;arial&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">                g_scn.update()</span><br><span class="line">                g_is_end = <span class="literal">True</span> <span class="comment">#end the game</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; <span class="built_in">len</span>(g_food_pos)): <span class="comment">#if eat the food</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">not</span>((i) <span class="keyword">in</span> g_eated) <span class="keyword">and</span> g_food_condition[i] <span class="keyword">and</span> (x,y) == g_food_pos[i]): </span><br><span class="line">                <span class="comment">#i is not eated, not hided</span></span><br><span class="line">                g_is_eating = <span class="literal">True</span> <span class="comment">#is eating the food</span></span><br><span class="line">                g_snake_sz += g_food_value[i] + <span class="number">1</span></span><br><span class="line">                g_food_object[i].clear()</span><br><span class="line">                g_eated.append(i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(g_eated) == <span class="number">5</span>): <span class="comment">#winer</span></span><br><span class="line">            g_is_win = <span class="literal">True</span> <span class="comment">#win but not end, need to extend</span></span><br><span class="line"></span><br><span class="line">    g_scn.update()</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> g_is_eating):</span><br><span class="line">        g_scn.ontimer(on_timer_snake, <span class="number">200</span>)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#if eating, slow down</span></span><br><span class="line">        g_scn.ontimer(on_timer_snake, <span class="number">300</span>) <span class="comment">#see row 178</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_timer_monster</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; main movement of monster &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_monster, g_scn, g_keypressed, g_snake, g_is_end, g_contact</span><br><span class="line">    <span class="keyword">if</span>(g_is_end):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    rand_time = rand(<span class="number">250</span>,<span class="number">350</span>) <span class="comment">#take a random rate,the monster will not that faster than snake to reduce the difficalty</span></span><br><span class="line">    x_s, y_s = g_snake.pos() <span class="comment">#positon of snake</span></span><br><span class="line">    x_s, y_s = <span class="built_in">round</span>(x_s), <span class="built_in">round</span>(y_s)</span><br><span class="line">    x_m, y_m = g_monster.pos() <span class="comment">#position of monster</span></span><br><span class="line">    x_m, y_m = <span class="built_in">round</span>(x_m), <span class="built_in">round</span>(y_m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x_s - x_m &gt; <span class="number">0</span>): <span class="comment">#atan is from -pi/2 to pi/2</span></span><br><span class="line">        <span class="built_in">dir</span> = (<span class="number">360</span>/(<span class="number">2</span>*pi)) * atan((y_s - y_m) / (x_s - x_m + <span class="number">0.0000001</span>)) <span class="comment">#the dir that moster need to go to (catch)</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#atan is from -pi/2 to pi/2</span></span><br><span class="line">        <span class="built_in">dir</span> = <span class="number">180</span> + (<span class="number">360</span>/(<span class="number">2</span>*pi)) * atan((y_s - y_m) / (x_s - x_m - <span class="number">0.0000001</span>)) <span class="comment">#the dir that moster need to go to (catch)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">dir</span> &gt; <span class="number">45</span> <span class="keyword">and</span> <span class="built_in">dir</span> &lt;= <span class="number">135</span>): <span class="comment">#change direction in 4 key direction</span></span><br><span class="line">        <span class="built_in">dir</span> = <span class="number">90</span></span><br><span class="line">    <span class="keyword">elif</span>( <span class="built_in">dir</span> &gt; <span class="number">135</span> <span class="keyword">and</span> <span class="built_in">dir</span> &lt;= <span class="number">225</span>):</span><br><span class="line">        <span class="built_in">dir</span> = <span class="number">180</span></span><br><span class="line">    <span class="keyword">elif</span>( <span class="built_in">dir</span> &gt; <span class="number">225</span> <span class="keyword">and</span> <span class="built_in">dir</span> &lt;= <span class="number">315</span>):</span><br><span class="line">        <span class="built_in">dir</span> = <span class="number">270</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">dir</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    g_monster.setheading(<span class="built_in">dir</span>)</span><br><span class="line">    g_monster.forward(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g_snake_pos)): <span class="comment">#count the contact time</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(x_m - g_snake_pos[i][<span class="number">0</span>]) &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="built_in">abs</span>(y_m - g_snake_pos[i][<span class="number">1</span>]) &lt; <span class="number">20</span>): <span class="comment">#contact with monster</span></span><br><span class="line">            g_contact += <span class="number">1</span></span><br><span class="line">            update_status() <span class="comment">#update quiker so that if win the contact is valid</span></span><br><span class="line"></span><br><span class="line">    g_scn.update()</span><br><span class="line">    g_scn.ontimer(on_timer_monster, rand_time)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; counting the gaming time &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_time, g_scn, g_keypressed</span><br><span class="line">    <span class="keyword">if</span>(g_is_end):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    g_time += <span class="number">1</span></span><br><span class="line">    update_status()</span><br><span class="line">    g_scn.ontimer(timer,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_timer_food</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; main function for food &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_eated, g_scn, g_food_pos, g_keypressed, g_food_object, g_x, g_y, g_time, g_is_end</span><br><span class="line"></span><br><span class="line">    rand_time = <span class="number">1000</span>*rand(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">    rand_tile = rand(<span class="number">0</span>,<span class="number">4</span>,g_eated) <span class="comment">#take randomly number from eated</span></span><br><span class="line">    <span class="keyword">if</span>(g_is_end):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(g_food_condition[rand_tile]):</span><br><span class="line">        g_food_object[rand_tile].clear() <span class="comment">#hide it</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g_food_object[rand_tile].write(g_food_value[rand_tile] + <span class="number">1</span>, font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">10</span>,<span class="string">&quot;normal&quot;</span>)) <span class="comment">#choose one to hide of unhide</span></span><br><span class="line">    g_food_condition[rand_tile] = <span class="keyword">not</span> g_food_condition[rand_tile] <span class="comment">#reverse the condition</span></span><br><span class="line"></span><br><span class="line">    g_scn.ontimer(on_timer_food, rand_time)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">None_motion</span>(<span class="params">x : <span class="built_in">int</span>, y : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; a spaced funcion &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">x : <span class="built_in">int</span>, y : <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; main fumction &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> g_scn, g_intro, g_status, g_keypressed, g_is_end, g_food_value</span><br><span class="line"></span><br><span class="line">    g_scn.onscreenclick(None_motion)</span><br><span class="line">    g_intro.clear()</span><br><span class="line">    <span class="keyword">if</span>(g_is_end):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#bind the keys</span></span><br><span class="line">    g_scn.onkey(partial(on_arrowkey_pressed,KEY_UP), KEY_UP)</span><br><span class="line">    g_scn.onkey(partial(on_arrowkey_pressed,KEY_DOWN), KEY_DOWN)</span><br><span class="line">    g_scn.onkey(partial(on_arrowkey_pressed,KEY_LEFT), KEY_LEFT)</span><br><span class="line">    g_scn.onkey(partial(on_arrowkey_pressed,KEY_RIGHT), KEY_RIGHT)</span><br><span class="line">    g_scn.onkey(partial(on_arrowkey_pressed,KEY_SPACE), KEY_SPACE)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#bind the timers</span></span><br><span class="line">    g_scn.ontimer(on_timer_food, <span class="number">1000</span>*rand(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line">    g_scn.ontimer(timer, <span class="number">1000</span>)</span><br><span class="line">    g_scn.ontimer(on_timer_snake, <span class="number">100</span>)</span><br><span class="line">    g_scn.ontimer(on_timer_monster, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g_food_value)): <span class="comment">#get new food objects</span></span><br><span class="line">        x_rand = rand(<span class="number">0</span>,<span class="number">24</span>,x_is_used)</span><br><span class="line">        y_rand = rand(<span class="number">0</span>,<span class="number">24</span>,y_is_used)</span><br><span class="line">        x = g_x[x_rand]</span><br><span class="line">        y = g_y[y_rand]</span><br><span class="line">        x_is_used.append(x_rand)</span><br><span class="line">        y_is_used.append(y_rand)</span><br><span class="line">        food = create_turtle(x-<span class="number">1</span>,y-<span class="number">6</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;black&quot;</span>)</span><br><span class="line">        food.ht()</span><br><span class="line">        food.write(g_food_value[i] + <span class="number">1</span>, font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">10</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        g_food_object.append(food)</span><br><span class="line">        g_food_pos.append((x,y))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">x : <span class="built_in">int</span> , y : <span class="built_in">int</span>, ban = []</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; this is for generate random int from x to y, without some int &quot;&quot;&quot;</span></span><br><span class="line">    l = <span class="built_in">list</span>(<span class="built_in">range</span>(x, y+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(ban) &gt;= <span class="built_in">len</span>(l) <span class="keyword">or</span> ban == []):</span><br><span class="line">        <span class="keyword">return</span> random.randint(x,y)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ban)):</span><br><span class="line">            <span class="keyword">if</span>(ban[i] <span class="keyword">in</span> l):</span><br><span class="line">                l.remove(ban[i])</span><br><span class="line">        <span class="keyword">return</span> l[random.randint(<span class="number">0</span>,<span class="built_in">len</span>(l)-<span class="number">1</span>)] <span class="comment">#randomly take a number from l</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>(__name__ == <span class="string">&quot;__main__&quot;</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; This is the main function &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    x_is_used = [] <span class="comment">#avoid being same position in food generation process</span></span><br><span class="line">    y_is_used = []</span><br><span class="line">    g_scn = Screan_setup()</span><br><span class="line">    g_intro, g_status = configure_play_area()</span><br><span class="line">    update_status()</span><br><span class="line">    g_monster = create_turtle(g_x[rand(<span class="number">1</span>, <span class="number">23</span>, [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>])]-<span class="number">10</span>, g_y[rand(<span class="number">1</span>, <span class="number">23</span>, [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>])]+<span class="number">10</span>,<span class="string">&quot;purple&quot;</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line">    g_snake = create_turtle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;red&quot;</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">    g_scn.onscreenclick(start_game) <span class="comment">#main function</span></span><br><span class="line"></span><br><span class="line">    g_scn.update() <span class="comment">#after all the change done, update the screen</span></span><br><span class="line">    g_scn.listen()</span><br><span class="line">    g_scn.mainloop()</span><br></pre></td></tr></table></figure><h2 id="最后庆祝CSC1002-2023-Spring-顺利完结！"><a href="#最后庆祝CSC1002-2023-Spring-顺利完结！" class="headerlink" title="最后庆祝CSC1002 2023 Spring 顺利完结！"></a>最后庆祝CSC1002 2023 Spring 顺利完结！</h2>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSC1002 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
